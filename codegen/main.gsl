.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This is root GSL file which sequentially run all necessary operations to
#   generate code from the module files.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "project.gsl"
gsl from "module.gsl"
gsl from "interface.gsl"
gsl from "implementor.gsl"
gsl from "implementation.gsl"
gsl from "context.gsl"
gsl from "meta.gsl"

gsl from "c_module.gsl"
gsl from "c_module_codegen.gsl"

gsl from "c_module_api.gsl"
gsl from "c_module_api_private.gsl"
gsl from "c_module_impl.gsl"
gsl from "c_module_impl_private.gsl"

gsl from "c_module_interface.gsl"
gsl from "c_module_implementation.gsl"


# ###########################################################################
#   Main data processing.
# ###########################################################################

# ---------------------------------------------------------------------------
#   Load and return all hight level models from known XML files.
# ---------------------------------------------------------------------------
function main_load_all (destination)
    check_argument (my, "destination")

    item_load_from_file ("project.xml", my.destination)

    item_load_from_file_pattern ("^module\.+xml$", my.destination, "module")
    item_load_from_file_pattern ("^interface_hash\.+xml$", my.destination, "interface")
    item_load_from_file_pattern ("^interface_kdf\.+xml$", my.destination, "interface")
    item_load_from_file_pattern ("^implementor\.+xml$", my.destination, "implementation")
endfunction

# ---------------------------------------------------------------------------
#   Entrypoint.
# ---------------------------------------------------------------------------
function run_main ()
    root = XML.new ("root")

    main.echo_level ?= "fatal"

    #   Create empty resolution context.
    new context to root
    endnew

    #   Load all components, including project.
    main_load_all (root)

    #   Process project.
    project_resolve (root->project)
    project_generate_structure (root->project)
    project_update_context (root->project, root->context)

    #   Process Interface / Implementation.
    foreach_interface_resolve (root, root->project)
    foreach_implementor_resolve (root, root->project)
    foreach_implementation_resolve (root, root->project)

    #   Create meta informtation about high level entities.
    my.meta = meta_create ()
    foreach_interface_update_meta (root, my.meta)
    foreach_implementation_update_meta (root, my.meta)
    item_save_to_file (my.meta, "meta.xml", root->project.work_path)

    #   Create modules.
    c_module_api_create (my.meta, root)
    c_module_api_private_create (my.meta, root)

    c_module_impl_create (my.meta, root)
    c_module_impl_private_create (my.meta, root)

    c_module_interface_create (root, root, my.meta)
    c_module_implementation_create (root, root, my.meta)

    #   Process modules.
    foreach_module_resolve (root, root->project)
    foreach_dump ("module", root, root->project.work_path)

    #   Create lang_modules.
    c_module_create (root, root, root->project)

    #   Process lang_modules.
    c_module_resolve (root)

    #   At this point all elements are created and resolved.
    item_save_to_file (root, "root.xml", root->project.work_path)

    #   Fullfil context with models name.
    context_resolve_refs (root->context, root)
    context_append_hierarchy (root->context, root)
    item_save_to_file (root->context, "context.xml", root->project.work_path)

    #   Generate code.
    for root.c_module
        my.c_module_resolved = \
                context_inject_to_lang_module (root->context, c_module, root->project.work_path)
        move my.c_module_resolved before c_module
        delete c_module
    endfor
    c_module_generate_sources (root)
endfunction

# ---------------------------------------------------------------------------
#   Generate bloat code. Make life easier.
# ---------------------------------------------------------------------------
run_main ()

.endtemplate
