.template 0
#   Copyright (C) 2015-2022 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This module contains functions processing component 'project'.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Add missed attributes and components to the 'project'.
# ---------------------------------------------------------------------------
function project_resolve (project)
    check_argument (my, "project")

    if count (my.project.version) = 0
        new version to my.project
        endnew
    endif

    assert_item (my.project, "version", my)
    assert_attribute (my.project, "name", my)
    assert_attribute (my.project, "namespace", my)
    assert_attribute (my.project, "path", my)
    assert_attribute (my.project, "work_path", my)

    my.project.namespace_dir = string.replace ("$(string_collapse_spaces (my.project.namespace):c,lower)", "_|/")
    my.project.inc_path ?= cat_path (my.project.path, "include", my.project.namespace_dir)
    my.project.inc_private_path ?= cat_path (my.project.path, "include", my.project.namespace_dir, "private")
    my.project.src_path ?= cat_path (my.project.path, "src")
    my.project.install_headers_dir ?= cat_path (my.project.namespace_dir)
    my.project.install_private_headers_dir ?= cat_path (my.project.namespace_dir, "private")
    my.project.framework ?= "VSC$(my.project.name:Pascal)"

    my.project.cmake_target = make_id(my.project.name)
    my.project.cmake_export_target = "vsc::$(my.project.cmake_target:)"
    my.project.cmake_enable_option = "VIRGIL_LIB_$(my.project.cmake_target:UPPER)"

    my.version = my.project->version
    my.version.major ?= 1
    my.version.minor ?= 0
    my.version.patch ?= 0

    my.project.version_major = my.version.major
    my.project.version_minor = my.version.minor
    my.project.version_patch = my.version.patch

    my.project.version_string = "$(my.version.major:).$(my.version.minor:).$(my.version.patch:)"
    my.project.cmake_target ?= "$(my.project.name:c)"

    my.project.wrappers ?= "all"

    new cmake_compile_definition to my.project
        .prefix = my.project.prefix
        .name = "shared library"
        .value = "BUILD_SHARED_LIBS"
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Generate project structure: folders, build files, etc.
# ---------------------------------------------------------------------------
function project_generate_structure (project)
    check_argument (my, "project")

    directory.create (my.project.path)
    directory.create (my.project.inc_path)
    directory.create (my.project.inc_private_path)
    directory.create (my.project.src_path)
    directory.create (my.project.work_path)
endfunction

.endtemplate
