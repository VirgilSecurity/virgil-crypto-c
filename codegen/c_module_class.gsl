.template 0
#   Copyright (C) 2015-2022 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Transform abstract 'class' declaration to the C language components.
#
#   Private function prefix is: X13.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"
gsl from "scoped_component.gsl"
gsl from "c_dependency.gsl"


# ---------------------------------------------------------------------------
#   Return true if class reuire creating "private" module.
# ---------------------------------------------------------------------------
function _X13_has_module_private (class)
    check_arguments (my, "class", my)

    if my.class.scope <> "public"
        return "0"
    endif

    return class_has_scoped_item_with_scope (my.class, "private")
endfunction

# ---------------------------------------------------------------------------
#   Return true if class reuire creating "internal" module.
# ---------------------------------------------------------------------------
function _X13_has_module_internal (class)
    check_arguments (my, "class", my)

    if my.class.scope = "internal"
        return "0"
    endif

    return class_has_scoped_item_with_scope (my.class, "internal")
endfunction

# ---------------------------------------------------------------------------
#   Add model 'struct' that handles class context.
# ---------------------------------------------------------------------------
function _X13_add_context_struct (class, declaration, definition, destination, meta)
    check_arguments (my, "class, declaration, definition, destination, meta", my)

    my.names = meta_names (my.meta)

    new struct to my.destination
        . = "Handle '$(my.class.name:)' context."
        .name = my.class.name
        .of_class = my.class.of_class ?
        .declaration = my.declaration
        .definition = my.definition

        if my.class.lifecycle <> "none" & my.class.context <> "none"
            new property to struct
                .name = my.names.class_property_self_dealloc
                .callback = ".(global_callback_dealloc)"
                .="\
                Function do deallocate self context.
                "
            endnew

            new property to struct
                . = "Reference counter."
                .name = my.names.property_ref_counter
                .type = "size"
                .is_atomic = "1"
            endnew
        endif

        c_dependency_add_properties (my.class, struct, my.meta)

        for my.class.property
            component_clean_copy (property, struct)
        endfor
    endnew

    if my.definition <> "external"
        if my.class.lifecycle <> "none" & my.class.context <> "none"
            new require to my.destination
                .module = my.names.module_atomic
                .scope = my.definition
            endnew
        endif

        for my.class.require where 0.scope="context"
            my.copied_require = item_copy_to(require, my.destination)
            my.copied_require.scope = my.definition
        endfor
    endif
endfunction

# ---------------------------------------------------------------------------
function _X13_add_method_context_size (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.class_method_ctx_size
        . = "\
        Return size of '$(my.refs.c_class_struct_ctx)'.
        "

        new return to method
            .type = "size"
        endnew

        new code to method
            . = "\
                return sizeof($(my.refs.c_class_struct_ctx));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
function _X13_add_argument_ctx (class, method, meta)
    check_arguments (my, "class, method, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    my.argument = item_prepend_new ("argument", my.method)

    scope my.argument
        .name = my.names.class_argument_ctx
        .class = my.refs.class_struct_ctx
        .access = my.method.is_const ?? "readonly" ? "readwrite"
        .is_reference = ! my.class.is_value_type
    endscope
endfunction

# ---------------------------------------------------------------------------
function _X13_add_argument_ctx_ref (class, method, meta)
    check_arguments (my, "class, method, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    my.argument = item_prepend_new ("argument", my.method)

    scope my.argument
        .name = my.names.class_argument_ctx
        .class = my.refs.class_struct_ctx
        .access = "disown"
        .is_reference = "1"
    endscope
endfunction

# ---------------------------------------------------------------------------
function _X13_add_return_ctx (class, method, meta)
    check_arguments (my, "class, method, meta", my)

    my.refs = meta_refs (my.meta)

    new return to my.method
        .class = my.refs.class_struct_ctx
        .access = my.method.is_const ?? "readonly" ? "disown"
        .is_reference = ! my.class.is_value_type
    endnew
endfunction

# ---------------------------------------------------------------------------
function _X13_add_method_init (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "\
        Perform initialization of pre-allocated context.
        "
        .name = my.names.method_init
        .is_const = "0"
        .is_static = "0"

        _X13_add_argument_ctx (my.class, method, my.meta)

        new code to method
            my.arg_ctx = my.refs.class_argument_ctx
            my.type_ctx = my.refs.c_class_struct_ctx

            . = "\
                .(c_class_assert_macros_ptr)($(my.arg_ctx));

                .(c_global_method_zeroize)($(my.arg_ctx), sizeof($(my.type_ctx)));

                $(my.arg_ctx)->$(my.names.c_property_ref_counter:) = 1;

                $(my.refs.c_class_method_init_ctx)($(my.arg_ctx));
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_method_cleanup (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "\
        Release all inner resources including class dependencies.
        "
        .name = my.names.method_cleanup
        .is_const = "0"
        .is_static = "0"

        _X13_add_argument_ctx (my.class, method, my.meta)


        new code to method
            my.arg_ctx = my.refs.class_argument_ctx
            my.type_ctx = my.refs.c_class_struct_ctx

            my.impl_check_precondition = "\
                if ($(my.arg_ctx) == NULL) {
                    return;
                }
            "

            my.impl_cleanup_begin = "\
                $(my.refs.c_class_method_cleanup_ctx)($(my.arg_ctx));
            "

            for my.class.dependency
                my.dependency = my.refs.c_dependency_property_$(make_id (dependency.name))
                my.method_dependency_release = my.refs.c_dependency_method_release_$(make_id (dependency.name))

                my.impl_cleanup_dependencies ?= ""
                my.impl_cleanup_dependencies += "\
                        $(my.method_dependency_release)($(my.arg_ctx));$(terminator)"
            endfor

            my.impl_cleanup_end = "\
                .(c_global_method_zeroize)($(my.arg_ctx), sizeof($(my.type_ctx)));
            "

            my.method_body = ""
            my.method_body += format_left (my.impl_check_precondition) + terminator
            my.method_body += format_left (my.impl_cleanup_begin) + terminator
            my.method_body += format_left (my.impl_cleanup_dependencies) + terminator ? ""
            my.method_body += format_left (my.impl_cleanup_end) + terminator

            . = my.method_body
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_method_init_ctx (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)


    new method to my.destination
        .name = my.names.method_init_ctx
        .definition = "private"
        .declaration = "private"
        .is_const = "0"
        .is_static = "0"

        . = "\
            Perform context specific initialization.
            Note, this method is called automatically when method $(my.refs.c_class_method_init)() is called.
            Note, that context is already zeroed.
        "


        _X13_add_argument_ctx (my.class, method, my.meta)
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_method_cleanup_ctx (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.method_cleanup_ctx
        .definition = "private"
        .declaration = "private"
        .is_const = "0"
        .is_static = "0"

        . = "\
            Release all inner resources.
            Note, this method is called automatically once when class is completely cleaning up.
            Note, that context will be zeroed automatically next this method.
        "

        _X13_add_argument_ctx (my.class, method, my.meta)

        new code to method
            .type = "stub"

            . = "\
                .(c_class_assert_macros_ptr)($(my.refs.class_argument_ctx));

                //  TODO: Release all inner resources.
            "
        endnew
    endnew
endfunction



# ---------------------------------------------------------------------------
function _X13_add_method_new (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "\
        Allocate context and perform it's initialization.
        "
        .name = my.names.method_new

        _X13_add_return_ctx (my.class, method, my.meta)

        new code to method
            my.type_ctx = my.refs.c_class_struct_ctx
            my.arg_ctx = my.names.c_class_argument_ctx

            . = "\
            $(my.type_ctx) *$(my.arg_ctx:) = ($(my.type_ctx) *) .(c_global_method_alloc)(sizeof ($(my.type_ctx)));
            .(c_class_assert_macros_alloc)($(my.arg_ctx:));

            $(my.refs.c_class_method_init)($(my.arg_ctx:));

            $(my.arg_ctx:)->$(my.refs.c_class_property_self_dealloc) = .(c_global_method_dealloc);

            return $(my.arg_ctx:);
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
function _X13_format_proxy_arguments (method)
    check_arguments (my, "method", my)

    for my.method.argument
        my.proxy_args ?= ""
        my.proxy_args += make_ref("_argument_$(make_id (argument.name))")
        if ! last()
            my.proxy_args += ", "
        endif
    endfor

    return my.proxy_args
endfunction

# ---------------------------------------------------------------------------
function _X13_add_method_custom_init (class, constructor, destination, meta)
    check_arguments (my, "class, constructor, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        if defined (my.constructor.)
            my.comment = format_left (my.constructor.)
        endif
        my.comment = format_left("Perform initialization of pre-allocated context.") + (my.comment ? "")
        . = my.comment

        .name = cat (my.names.method_init, my.constructor.name)
        .declaration ?= my.constructor.declaration ?
        .definition ?= my.constructor.definition ?
        .visibility ?= my.constructor.visibility ?

        _X13_add_argument_ctx (my.class, method, my.meta)

        for my.constructor.argument
            component_clean_copy (argument, method)
        endfor

        new code to method
            my.type_ctx = my.refs.c_class_struct_ctx
            my.arg_ctx = my.names.c_class_argument_ctx
            my.method_init_ctx = make_ref_c (make_id ("class", my.class.name, "method init ctx", my.constructor.name))
            my.proxy_args = _X13_format_proxy_arguments (my.constructor)

            . = "\
                .(c_class_assert_macros_ptr)($(my.arg_ctx));

                .(c_global_method_zeroize)($(my.arg_ctx), sizeof($(my.type_ctx)));

                $(my.arg_ctx)->$(my.names.c_property_ref_counter:) = 1;

                $(my.method_init_ctx)($(my.arg_ctx), $(my.proxy_args:));
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_method_custom_init_ctx (class, constructor, destination, meta)
    check_arguments (my, "class, constructor, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = my.constructor. ?
        .name = cat (my.names.method_init_ctx, my.constructor.name)
        .declaration = "private"
        .definition = "private"

        _X13_add_argument_ctx (my.class, method, my.meta)

        for my.constructor.argument
            component_clean_copy (argument, method)
        endfor

        new code to method
            .type = "stub"
            . = "\
                //   TODO: Perform initialization.
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_custom_new (class, constructor, destination, meta)
    check_arguments (my, "class, constructor, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        if defined (my.constructor.)
            my.comment = format_left (my.constructor.)
        endif
        my.comment = format_left("Allocate class context and perform it's initialization.") + (my.comment ? "")
        . = my.comment

        .name = cat (my.names.method_new, my.constructor.name)
        .declaration ?= my.constructor.declaration ?
        .definition ?= my.constructor.definition ?
        .visibility ?= my.constructor.visibility ?

        _X13_add_return_ctx (my.class, method, my.meta)

        for my.constructor.argument
            component_clean_copy (argument, method)
        endfor

        new code to method
            my.type_ctx = my.refs.c_class_struct_ctx
            my.arg_ctx = my.names.c_class_argument_ctx
            my.method_init = make_ref_c (make_id ("class", my.class.name, "method init", my.constructor.name))
            my.proxy_args = _X13_format_proxy_arguments (my.constructor)

            . = "\
                $(my.type_ctx) *$(my.arg_ctx:) = ($(my.type_ctx) *) .(c_global_method_alloc)(sizeof ($(my.type_ctx)));
                .(c_class_assert_macros_alloc)($(my.arg_ctx:));

                $(my.method_init)($(my.arg_ctx:), $(my.proxy_args:));

                $(my.arg_ctx:)->$(my.refs.c_class_property_self_dealloc) = .(c_global_method_dealloc);

                return $(my.arg_ctx:);
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_value_type_constructor (class, constructor, destination, meta)
    check_arguments (my, "class, constructor, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = my.constructor. ?
        .name = my.constructor.name
        .declaration ?= my.constructor.declaration ?
        .definition ?= my.constructor.definition ?
        .visibility ?= my.constructor.visibility ?

        for my.constructor.argument
            component_clean_copy (argument, method)
        endfor

        _X13_add_return_ctx (my.class, method, my.meta)

        new code to method
            my.type_ctx = my.refs.c_class_struct_ctx
            my.arg_ctx = my.names.c_class_argument_ctx

            .type = "stub"
            . = "\
                $(my.type_ctx) $(my.arg_ctx:);

                //  TODO: Perform initialization.

                return $(my.arg_ctx:);
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_object_type_constructor (class, constructor, destination, meta)
    check_arguments (my, "class, constructor, destination, meta", my)

    _X13_add_method_custom_init(my.class, my.constructor, my.destination, my.meta)
    _X13_add_method_custom_init_ctx(my.class, my.constructor, my.destination, my.meta)
    _X13_add_custom_new(my.class, my.constructor, my.destination, my.meta)
endfunction


# ---------------------------------------------------------------------------
function _X13_add_constructor (class, constructor, destination, meta)
    check_arguments (my, "class, constructor, destination, meta", my)

    if my.class.is_value_type
        _X13_add_value_type_constructor (my.class, my.constructor, my.destination, my.meta)
    else
        _X13_add_object_type_constructor (my.class, my.constructor, my.destination, my.meta)
    endif
endfunction


# ---------------------------------------------------------------------------
function _X13_add_method_delete (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.method_delete
        .is_const = "0"
        .is_static = "0"

        . = "\
        Release all inner resources and deallocate context if needed.
        It is safe to call this method even if the context was statically allocated.
        "

        _X13_add_argument_ctx (my.class, method, my.meta)

        new code to method
            my.arg_ctx = my.refs.class_argument_ctx
            my.counter = "$(my.arg_ctx)->$(my.names.c_property_ref_counter:)"

            . = "\
            if ($(my.arg_ctx) == NULL) {
                return;
            }

            size_t old_counter = $(my.counter:);
            .(c_class_assert_macros_assert)(old_counter != 0);
            size_t new_counter = old_counter - 1;

            #if defined(.(c_class_atomic_macros_compare_exchange_weak))
            //  CAS loop
            while (!.(c_class_atomic_macros_compare_exchange_weak)(&$(my.counter:), &old_counter, new_counter)) {
                old_counter = $(my.counter:);
                .(c_class_assert_macros_assert)(old_counter != 0);
                new_counter = old_counter - 1;
            }
            #else
            $(my.counter:) = new_counter;
            #endif

            if (new_counter > 0) {
                return;
            }

            .(c_global_callback_dealloc) self_dealloc_cb = $(my.arg_ctx:)->$(my.refs.c_class_property_self_dealloc);

            $(my.refs.c_class_method_cleanup)($(my.arg_ctx));

            if (self_dealloc_cb != NULL) {
                self_dealloc_cb($(my.arg_ctx));
            }
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
function _X13_add_method_destroy (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.method_destroy
        .is_const = "0"
        .is_static = "0"

        . = "\
        Delete given context and nullifies reference.
        This is a reverse action of the function '$(my.refs.c_class_method_new) ()'.
        "

        _X13_add_argument_ctx_ref (my.class, method, my.meta)

        new code to method
            my.arg_ctx_ref = my.refs.class_argument_ctx
            my.arg_ctx = my.names.c_class_argument_ctx
            my.type_ctx = my.refs.c_class_struct_ctx

            . = "\
            .(c_class_assert_macros_ptr)($(my.arg_ctx_ref));

            $(my.type_ctx) *$(my.arg_ctx:) = *$(my.arg_ctx_ref);
            *$(my.arg_ctx_ref) = NULL;

            $(my.refs.c_class_method_delete)($(my.arg_ctx:));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
function _X13_add_method_shallow_copy (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.method_shallow_copy
        .is_const = "0"

        . = "
        Copy given class context by increasing reference counter.
        "

        _X13_add_argument_ctx (my.class, method, my.meta)
        _X13_add_return_ctx (my.class, method, my.meta)

        new code to method
            my.arg_ctx = my.refs.class_argument_ctx
            my.counter = "$(my.arg_ctx:)->$(my.names.c_property_ref_counter:)"

            . = "\
                .(c_class_assert_macros_ptr)($(my.arg_ctx));

                #if defined(.(c_class_atomic_macros_compare_exchange_weak))
                //  CAS loop
                size_t old_counter;
                size_t new_counter;
                do {
                    old_counter = $(my.counter:);
                    new_counter = old_counter + 1;
                } while (!.(c_class_atomic_macros_compare_exchange_weak)(&$(my.counter:), &old_counter, new_counter));
                #else
                ++$(my.counter:);
                #endif

                return $(my.arg_ctx);
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Copy class methods with context resolution.
# ---------------------------------------------------------------------------
function _X13_add_method (class, method, module, meta)
    check_arguments (my, "class, method, module, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    my.copied_method = component_clean_copy (my.method, my.module)

    if ! my.copied_method.is_static
        _X13_add_argument_ctx (my.class, my.copied_method, my.meta)
    endif

    # redefine placeholder class='self'
    for my.copied_method.argument where string_equal(0.class, "self")
        .class = my.refs.class_struct_ctx
    endfor

    for my.copied_method.return where string_equal(0.class, "self")
        .class = my.refs.class_struct_ctx
    endfor

    return my.copied_method
endfunction

# ---------------------------------------------------------------------------
#   Add methods that manages class lifecycle.
# ---------------------------------------------------------------------------
function _X13_add_lifecycle_methods (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    _X13_add_method_init (my.class, my.destination, my.meta)
    _X13_add_method_init_ctx (my.class, my.destination, my.meta)
    _X13_add_method_cleanup (my.class, my.destination, my.meta)
    _X13_add_method_cleanup_ctx (my.class, my.destination, my.meta)
    _X13_add_method_new (my.class, my.destination, my.meta)

    for my.class.constructor
        _X13_add_constructor (my.class, constructor, my.destination, my.meta)
    endfor

    _X13_add_method_delete (my.class, my.destination, my.meta)
    _X13_add_method_destroy (my.class, my.destination, my.meta)
    _X13_add_method_shallow_copy (my.class, my.destination, my.meta)

    c_dependency_add_lifecycle_methods (my.class, "public", "private", my.destination, my.meta)
    c_dependency_add_observer_methods (my.class, "private", "private", my.destination, my.meta)
endfunction

# ---------------------------------------------------------------------------
#   Create 'module' component with a public API for given class.
# ---------------------------------------------------------------------------
function c_module_class_create_module (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination
        . = my.class.?
        .name = my.names.class_module
        .feature = my.class.name
        .of_class = my.class.name
        .c_prefix = my.class.c_prefix
        .scope = my.class.scope ?

        new require to module
            .module = my.names.module_library
        endnew

        new require to module
            .module = my.names.module_memory
            .scope = "private"
        endnew

        new require to module
            .module = my.names.module_assert
            .scope = "private"
        endnew

        if _X13_has_module_private (my.class)
            new require to module
                .module = my.names.class_module_private
                .scope = "private"
            endnew
        endif

        if _X13_has_module_internal (my.class)
            new require to module
                .module = my.names.class_module_internal
                .scope = "private"
            endnew
        endif

        c_dependency_add_requirements (my.class, module)

        if my.class.context = "public"
            _X13_add_context_struct (my.class, "public", "public", module, my.meta)

        elsif string_in (my.class.context, "private, internal")
            _X13_add_context_struct (my.class, "public", "external", module, my.meta)

            new require to module
                .module = my.names.class_module_defs
                .scope = "private"
            endnew
        endif


        if my.class.context <> "none"
            _X13_add_method_context_size (my.class, module, my.meta)
        endif


        if my.class.lifecycle <> "none" & my.class.context <> "none"
            _X13_add_lifecycle_methods (my.class, module, my.meta)

        elsif my.class.context <> "none"
            for my.class.constructor where constructor.scope = "public"
                _X13_add_constructor (my.class, constructor, module, my.meta)
            endfor
        endif


        for my.class.require
            component_clean_copy (require, module)
        endfor

        for my.class.c_include
            component_clean_copy (c_include, module)
        endfor

        for my.class.macros
            component_clean_copy (macros, module)
        endfor

        for my.class.macroses
            component_clean_copy (macroses, module)
        endfor

        class_add_scoped_components_to_main_module (my.class, "_X13_add_method", module, my.meta)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create 'module' component with a private API for given class.
# ---------------------------------------------------------------------------
function c_module_class_create_module_private (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination
        .name = my.names.class_module_private
        .of_class = my.class.name
        .c_prefix = my.class.c_prefix
        .scope = "private"
        .is_header_only = "1"

        class_add_scoped_components_to_extended_module (my.class, "_X13_add_method", module, my.meta)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create 'module' component with an internal API for given class.
# ---------------------------------------------------------------------------
function c_module_class_create_module_internal (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination
        .name = my.names.class_module_internal
        .of_class = my.class.name
        .c_prefix = my.class.c_prefix
        .scope = "internal"
        .is_header_only = "1"

        new require to module
            .module = my.names.class_module
        endnew

        class_add_scoped_components_to_extended_module (my.class, "_X13_add_method", module, my.meta)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create 'module' component with a types defineition for given class.
# ---------------------------------------------------------------------------
function c_module_class_create_module_defs (class, destination, meta)
    check_arguments (my, "class, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination
        .name = my.names.class_module_defs
        .scope = my.class.context
        .feature = my.class.name
        .of_class = my.class.name
        . = "
        Class '$(my.class.name:)' types definition.
        "

        new require to module
            .module = my.names.module_library
        endnew

        _X13_add_context_struct (my.class, "external", "public", module, my.meta)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Entrypoint.
# ---------------------------------------------------------------------------
function c_module_class_create (source, destination, meta)
    check_arguments (my, "source, destination, meta", my)

    for my.source.class by name
        meta_reset_active_entity (my.meta, class.name)
        c_module_class_create_module (class, my.destination, my.meta)

        if _X13_has_module_private (class)
            c_module_class_create_module_private (class, my.destination, my.meta)
        endif

        if _X13_has_module_internal (class)
            c_module_class_create_module_internal (class, my.destination, my.meta)
        endif

        if string_in (class.context, "private, internal")
            c_module_class_create_module_defs (class, my.destination, my.meta)
        endif
    endfor

endfunction

.endtemplate
