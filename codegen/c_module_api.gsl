.template 0
#   Copyright (C) 2015-2021 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Shared Interface Public API'.
#   Private function prefix is: N24.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

gsl from "module.gsl"

# ---------------------------------------------------------------------------
#   Add declaration for generic API type.
# ---------------------------------------------------------------------------
function _N24_add_type_self (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new struct to my.destination
        . = "Generic type for any 'API' object."

        .name = my.names.module_api
        .definition = "external"
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add type that enumerates all possible interfaces within crypto.
# ---------------------------------------------------------------------------
function _N24_add_enum_tag (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new enum to my.destination
        . = "Enumerates all possible interfaces within crypto library."

        .name = my.names.enum_tag
        .of_class = my.names.class_api
        .definition = "public"

        new constant
            .name = my.names.enum_constant_begin
            .value = "0"
        endnew

        new constant
            .name = my.names.enum_constant_end
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create public module with functionality common for all 'api' objects.
#   It is also enumerate all available interfaces within crypto libary.
# ---------------------------------------------------------------------------
function c_module_api_create (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    echo_trace ("Create module: $(my.names.module_api)", my)

    new module to my.destination
        . = "\
        Create module with functionality common for all 'api' objects.
        It is also enumerate all available interfaces within crypto libary.
        "

        .name = my.names.module_api
        .of_class = my.names.class_api

        new require
            .module = my.names.module_library
            .definition = "public"
        endnew

        _N24_add_type_self (my.meta, module)
        _N24_add_enum_tag (my.meta, module)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return enumeration type for 'api' within given source.
# ---------------------------------------------------------------------------
function c_module_api_find_enum_tag (source, meta)
    check_arguments (my, "source, meta", my)

    my.names = meta_names (my.meta)

    my.module = my.source->module (name = my.names.module_api) ?
    if ! defined (my.module)
        echo_fatal ("Module '$(my.names.module_api:)' \
                is not found within given source.", my)
    endif

    my.enum = my.module->enum (name = my.names.enum_tag) ?
    if ! defined (my.enum)
        echo_fatal ("Enum '$(my.names.enum_tag)' \
                is not found within module '$(my.names.module_api:)'.", my)
    endif

    return my.enum
endfunction

.endtemplate
