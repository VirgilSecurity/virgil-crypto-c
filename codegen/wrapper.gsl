.template 0
#   Copyright (C) 2015-2022 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains generic API for wrapper generation for any supported language.
#
#   To add new supported language do next:
#       1. Create file `<lang>.gsl` with methods:
#           - <lang>_resolve_wrapper (wrapper) [optional]
#           - <lang>_create_project_module (project, wrapper)
#           - <lang>_create_custom_modules (source, wrapper_project, meta) [optional]
#           - <lang>_create_interface_module (interface, wrapper_project, meta)
#           - <lang>_create_implementation_module (impl, wrapper_project, meta)
#           - <lang>_create_class_module (class, wrapper_project, meta)
#           - <lang>_create_enum_module (enum, wrapper_project, meta)
#           - <lang>_finalize_custom_modules (source, wrapper_project, meta) [optional]
#           - <lang>_module_resolve(wrapper_module, wrapper_project)
#           - <lang>_create_toplevel_modules (wrapper) [optional]
#
#       2. Create file `<lang>_codegen.gsl` with methods:
#           - <lang>_generate_project(wrapper_project)
#           - <lang>_generate_sources(wrapper_project)
#
#       3. Add `gsl from "<lang>.gsl"` to this file.
#       4. Add `gsl from "<lang>_codegen.gsl"` to `<lang>.gsl` file.
#       5. Create file `models/wrapper/wrapper_<lang>.xml`
#       6. Add entity `<wrapper lang="<lang>"/>` to main project.
#       7. For each project that should be wrapped update property `wrappers`
#          by adding `<lang>`, for instance `<project wrappers="swift, php"/>`.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "wrapper_helpers.gsl"
gsl from "swift.gsl"
gsl from "java.gsl"
gsl from "php.gsl"
gsl from "wasm.gsl"
gsl from "python.gsl"
gsl from "go.gsl"

# ---------------------------------------------------------------------------
#   Create project root module, for instance:
#       <swift_project name="foundation">
#           <!-- Here will be placed <swift_module/> -->
#       </swift_project>
# ---------------------------------------------------------------------------
function wrapper_create_project_module (project, wrapper)
    check_arguments (my, "project, wrapper", my)

    my.proxy_func = make_id(my.wrapper.lang, "create_project_module")
    if macro (my.proxy_func)
        return $(my.proxy_func:) (my.project, my.wrapper)
    else
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif
endfunction

# ---------------------------------------------------------------------------
#   Create a bunch of custom modules that are not related to the existing
#   high-level models.
# ---------------------------------------------------------------------------
function wrapper_create_custom_modules (source, wrapper_project, meta)
    check_arguments (my, "source, wrapper_project, meta", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "create_custom_modules")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.source, my.wrapper_project, my.meta)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Create language specific module that will represent interface.
# ---------------------------------------------------------------------------
function wrapper_foreach_interface_create_module (source, wrapper_project, meta)
    check_arguments (my, "source, wrapper_project, meta", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "create_interface_module")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.interface where interface.scope = "public"
        meta_reset_active_entity (my.meta, interface.name)
        $(my.proxy_func:) (interface, my.wrapper_project, my.meta)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create language specific module that will represent implementation.
# ---------------------------------------------------------------------------
function wrapper_foreach_implementation_create_module (source, wrapper_project, meta)
    check_arguments (my, "source, wrapper_project, meta", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "create_implementation_module")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.implementation where implementation.scope = "public"
        meta_reset_active_entity (my.meta, implementation.name)
        $(my.proxy_func:) (implementation, my.wrapper_project, my.meta)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create language specific module that will represent class.
# ---------------------------------------------------------------------------
function wrapper_foreach_class_create_module (source, wrapper_project, meta)
    check_arguments (my, "source, wrapper_project, meta", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "create_class_module")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.class where class.scope = "public"
        meta_reset_active_entity (my.meta, class.name)
        $(my.proxy_func:) (class, my.wrapper_project, my.meta)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create language specific module that will represent enum.
# ---------------------------------------------------------------------------
function wrapper_foreach_enum_create_module (source, wrapper_project, meta)
    check_arguments (my, "source, wrapper_project, meta", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "create_enum_module")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.source.enum where enum.scope = "public"
        meta_reset_active_entity (my.meta, enum.name)
        $(my.proxy_func:) (enum, my.wrapper_project, my.meta)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Finalize creating custom modules.
#   This function is called when all project modules was already created.
# ---------------------------------------------------------------------------
function wrapper_finalize_custom_modules (source, wrapper_project, meta)
    check_arguments (my, "source, wrapper_project, meta", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "finalize_custom_modules")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.source, my.wrapper_project, my.meta)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Add missed attributed for created language specific modules.
# ---------------------------------------------------------------------------
function wrapper_foreach_module_resolve(wrapper_project)
    check_arguments (my, "wrapper_project", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "module_resolve")
    if ! macro (my.proxy_func)
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif

    for my.wrapper_project.$(make_id (my.wrapper_project.lang, "module")) as wrapper_module
        $(my.proxy_func:) (wrapper_module, my.wrapper_project)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create language specific modules that is common for all projects.
#       - wrapper - is a container that handle all created wrapper projects.
# ---------------------------------------------------------------------------
function wrapper_create_toplevel_modules(wrapper)
    check_arguments (my, "wrapper", my)

    my.proxy_func = make_id(my.wrapper.lang, "create_toplevel_modules")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.wrapper)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Generate project files.
# ---------------------------------------------------------------------------
function wrapper_generate_project(wrapper_project)
    check_arguments (my, "wrapper_project", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "generate_project")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.wrapper_project)
    else
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif
endfunction

# ---------------------------------------------------------------------------
#   Generate source files.
# ---------------------------------------------------------------------------
function wrapper_generate_sources(wrapper_project)
    check_arguments (my, "wrapper_project", my)

    my.proxy_func = make_id(my.wrapper_project.lang, "generate_sources")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.wrapper_project)
    else
        echo_fatal ("Proxy call to undefined function '$(my.proxy_func:)()'")
    endif
endfunction


# ===========================================================================
#   Work with a wrappers cache file.
# ===========================================================================

# ---------------------------------------------------------------------------
#   Load cached <wrappers/> entity or create new one.
# ---------------------------------------------------------------------------
function wrappers_load (work_path)
    check_arguments (my, "work_path", my)

    my.dir_path = directory.resolve (my.work_path) ?
    my.file_path = "$(my.dir_path?:)wrappers.xml"

    if file.exists (my.file_path)
        my.wrappers = item_load_from_file(my.file_path)
    else
        my.wrappers = XML.new("wrappers")
    endif

    return my.wrappers
endfunction

# ---------------------------------------------------------------------------
#   Save <wrappers/> entity to the file at given path.
# ---------------------------------------------------------------------------
function wrappers_save (wrappers, work_path)
    check_arguments (my, "wrappers", my)

    item_save_to_file(my.wrappers, "wrappers.xml", my.work_path)
endfunction

# ---------------------------------------------------------------------------
#   Update cached wrapper with a new one.
# ---------------------------------------------------------------------------
function wrappers_update_wrapper(wrappers, loaded_wrapper)
    check_arguments (my, "wrappers, loaded_wrapper", my)

    my.existing_wrapper = my.wrappers->wrapper(lang = my.loaded_wrapper.lang) ?
    my.new_wrapper = item_copy_to(my.loaded_wrapper, my.wrappers)

    if defined (my.existing_wrapper)
        my.existing_wrapper.source_dir = my.loaded_wrapper.source_dir

        for my.existing_wrapper.license
            delete license
        endfor

        for my.existing_wrapper. as item where is_item(item)
            move item to my.new_wrapper
        endfor

        delete my.existing_wrapper
    endif

    my.proxy_func = make_id(my.wrapper.lang, "resolve_wrapper")
    if macro (my.proxy_func)
        $(my.proxy_func:) (my.new_wrapper)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Return wrapper for a given lang.
# ---------------------------------------------------------------------------
function wrappers_find_wrapper (wrappers, lang)
    check_arguments (my, "wrappers, lang", my)

    my.wrapper = my.wrappers->wrapper(lang = my.lang)

    if ! defined (my.wrapper)
        echo_fatal ("Wrapper for lang='$(my.lang:)' is not found")
    endif

    return my.wrapper
endfunction

# ---------------------------------------------------------------------------
#   Removed cached project.
# ---------------------------------------------------------------------------
function wrappers_reset_wrapper_project (wrapper, project)
    check_arguments (my, "wrapper, project")

    my.project_item_name = make_id (my.wrapper.lang, "project")
    my.lang_project = my.wrapper->$(my.project_item_name:)(name = my.project.name) ?
    if defined (my.lang_project)
        delete my.lang_project
    endif
endfunction

.endtemplate
