.template 0
#   Copyright (C) 2015-2021 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with all-in-one headers.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "meta.gsl"


# ---------------------------------------------------------------------------
#   Create "umbrella" headers by inspecting 'c_module' components.
# ---------------------------------------------------------------------------
function c_module_umbrella_headers_create (source, destination, meta)
    check_arguments (my, "source, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination as module_umbrella
        . =  "This ia an umbrella header that includes library public headers."
        .name = cat (my.names.project, "public")
        .scope = "public"
        .is_umbrella = "1"

        new require to module_umbrella
            .module = my.names.module_platform
            .definition = "public"
        endnew

        for my.source.module \
                where (module.name <> module_umbrella.name) & (module.name <> my.names.module_platform) \
                by 0.name

            if defined (module.scope) & module.scope <> "public"
                next
            endif

            new require to module_umbrella
                .module = module.name
                .definition = "public"
                .if_feature = module.feature ?
            endnew
        endfor
    endnew

    new module to my.destination as module_umbrella
        . =  "This is an umbrella header that includes library private headers."
        .name = cat (my.names.project, "private")
        .scope = "private"
        .is_umbrella = "1"

        new require to module_umbrella
            .module = my.names.module_platform
            .definition = "public"
        endnew

        for my.source.module \
                where (module.name <> module_umbrella.name) & (module.name <> my.names.module_platform) \
                by 0.name

            if ! (defined (module.scope) & module.scope = "private")
                next
            endif

            new require to module_umbrella
                .module = module.name
                .definition = "public"
                .if_feature = module.feature ?
            endnew
        endfor
    endnew
endfunction

.endtemplate
