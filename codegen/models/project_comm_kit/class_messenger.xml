<class name="messenger">
    Entrypoint to the messenger user management, authentication and encryption.

    <require class="str buffer" project="common" api="defs"/>
    <require impl="ctr drbg" project="foundation"/>
    <require class="padding params" project="foundation"/>
    <require class="random padding" project="foundation"/>
    <require class="recipient cipher" project="foundation"/>
    <require class="card client" project="core sdk"/>
    <require class="card manager" project="core sdk"/>
    <require class="messenger group" api="private"/>
    <require class="messenger user list" api="private"/>

    <property name="config" class="messenger config" access="readonly"/>
    <property name="auth" class="messenger auth"/>
    <property name="contacts" class="messenger contacts"/>

    <dependency name="random" interface="random" project="foundation" has_observers="1"/>


    <constructor name="with config">
        Initialize messenger with a custom configuration.

        <argument name="config" class="messenger config"/>
    </constructor>


    <method name="setup defaults">
        Setup predefined values to the uninitialized class dependencies.

        <return enum="status"/>
    </method>


    <!-- Duplicate auth interface for convenience -->
    <method name="register">
        Register a new user with a given name.

        <argument name="username" class="str"/>

        <return enum="status"/>
    </method>


    <method name="authenticate">
        Authenticate a user with a given credentials.

        <argument name="creds" class="messenger creds" access="readonly"/>

        <return enum="status"/>
    </method>


    <method name="is authenticated" is_const="1">
        Return true if a user is authenticated.

        <return type="boolean"/>
    </method>


    <method name="user" is_const="1">
        Return information about current user.

        Prerequisites: user should be authenticated.

        <return class="messenger user"/>
    </method>


    <method name="user modifiable">
        Return information about current user.

        Prerequisites: user should be authenticated.

        <return class="messenger user" access="readwrite"/>
    </method>


    <method name="username" is_const="1">
        Return name of the current user.

        Prerequisites: user should be authenticated.

        <return class="str"/>
    </method>


    <method name="creds" is_const="1">
        Return user credentials.

        <return class="messenger creds"/>
    </method>


    <method name="has backup creds" is_const="1">
        Check whether current credentials were backed up.

        Prerequisites: user should be authenticated.

        <argument name="error" class="error" access="readwrite"/>

        <return type="boolean"/>
    </method>


    <method name="backup creds" is_const="1">
        Encrypt the user credentials and push them to the secure cloud storage (Keyknox).

        Prerequisites: user should be authenticated.

        <argument name="pwd" class="str"/>

        <return enum="status"/>
    </method>


    <method name="authenticate with backup creds">
        Authenticate user by using backup credentials.

        <argument name="username" class="str"/>
        <argument name="pwd" class="str"/>

        <return enum="status"/>
    </method>


    <method name="remove creds backup" is_const="1">
        Remove credentials backup from the secure cloud storage (Keyknox).

        Prerequisites: user should be authenticated.

        <return enum="status"/>
    </method>


    <method name="auth" is_const="1" scope="private">
        Return authentication module.

        It should be used with great carefulness and responsibility.

        <return class="messenger auth"/>
    </method>


    <!-- Find users -->
    <method name="find user with identity" is_const="1">
        Return founded user or error.

        <argument name="identity" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="messenger user" access="disown"/>
    </method>


    <method name="find user with username" is_const="1">
        Return founded user or error.

        <argument name="username" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="messenger user" access="disown"/>
    </method>


    <!-- Peer-to-Peer encryption -->
    <method name="encrypted message len" is_const="1">
        Return a buffer length enough to hold an encrypted message.

        <argument name="message len" type="size"/>
        <argument name="recipient" class="messenger user"/>

        <return type="size"/>
    </method>


    <method name="encrypt text" is_const="1">
        Encrypt a text message.

        <argument name="text" class="str"/>
        <argument name="recipient" class="messenger user"/>

        <argument name="out" class="buffer">
            <length method="encrypted len">
                <proxy argument="recipient" to="recipient"/>
                <proxy argument="text" to="message message len" cast="str_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <method name="encrypt data" is_const="1">
        Encrypt a binary message.

        <argument name="data" class="data"/>
        <argument name="recipient" class="messenger user"/>

        <argument name="out" class="buffer">
            <length method="encrypted len">
                <proxy argument="recipient" to="recipient"/>
                <proxy argument="data" to="message message len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <method name="decrypted message len" is_const="1">
        Return a buffer length enough to hold a decrypted message.

        <argument name="encrypted message len" type="size"/>

        <return type="size"/>
    </method>


    <method name="decrypt text" is_const="1">
        Decrypt a text message.

        <argument name="encrypted text" class="data"/>

        <argument name="sender" class="messenger user"/>

        <argument name="out" class="str buffer">
            <length method="decrypted message  len">
                <proxy argument="encrypted text" to="encrypted message len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <method name="decrypt data" is_const="1">
        Decrypt a binary message.

        <argument name="encrypted data" class="data"/>

        <argument name="sender" class="messenger user"/>

        <argument name="out" class="buffer">
            <length method="decrypted message  len">
                <proxy argument="encrypted text" to="encrypted message len" cast="data_length"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <!-- Working with messenger groups -->
    <method name="create group" is_const="1">
        Create a new group for a group messaging.

        Prerequisites: user should be authenticated.
        Note, group owner is added to the participants automatically.

        <argument name="group id" class="str"/>
        <argument name="participants" class="messenger user list"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="messenger group" access="disown"/>
    </method>


    <method name="load group" is_const="1">
        Load an existing group for a group messaging.

        Prerequisites: user should be authenticated.

        <argument name="group id" class="str"/>
        <argument name="owner" class="messenger user"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="messenger group" access="disown"/>
    </method>

    <!-- Helpers -->
    <method name="map foundation status of decryption" is_static="1" declaration="private">
        Map status from the "foundation" library to a status related to the message decryption.

        <argument name="foundation status" enum="status" project="foundation"/>

        <return enum="status"/>
    </method>
</class>
