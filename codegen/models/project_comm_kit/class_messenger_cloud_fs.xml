<class name="messenger cloud fs">
    This class provides access to the messenger Cloud File System, that can be used to store and share files.


    <require class="recipient cipher" project="foundation"/>
    <require class="message info editor" project="foundation"/>
    <require interface="private key" project="foundation"/>

    <dependency name="client" class="messenger cloud fs client"/>
    <dependency name="random" interface="random" project="foundation" has_observers="1"/>

    <property name="key provider" class="key provider" project="foundation"/>


    <!-- For test purposes -->
    <method name="client" is_const="1">
        Return the Cloud FS client.

        <return class="messenger cloud fs client"/>
    </method>


    <!-- Endpoints -->
    <method name="create file" is_const="1">
        Create a new file within the Cloud FS.
        Note, if folder id is empty then file created in a root folder.

        <argument name="name" class="str"/>
        <argument name="type" class="str"/>
        <argument name="size" type="size"/>
        <argument name="file key" class="data"/>
        <argument name="parent folder id" class="str"/>
        <argument name="parent folder public key" class="data"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs created file" access="disown"/>
    </method>


    <method name="get download link" is_const="1">
        Get a file download link.

        <argument name="id" class="str"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs file download info" access="disown"/>
    </method>


    <method name="delete file" is_const="1">
        Delete existing file.

        <argument name="id" class="str"/>

        <return enum="status"/>
    </method>


    <method name="create folder" is_const="1">
        Create a new folder within the Cloud FS.
        Note, if parent folder id is empty then folder created in a root folder.

        <argument name="name" class="str"/>
        <argument name="parent folder id" class="str"/>
        <argument name="parent folder public key" class="data"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs folder info" access="disown"/>
    </method>


    <method name="create shared folder" is_const="1">
        Create a new folder within the Cloud FS that is shared with other users.
        Note, if parent folder id is empty then folder created in a root folder.

        <argument name="name" class="str"/>
        <argument name="parent folder id" class="str"/>
        <argument name="parent folder public key" class="data"/>
        <argument name="users access" class="messenger cloud fs access list"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs folder info" access="disown"/>
    </method>


    <method name="list folder" is_const="1">
        List content of requested folder.
        Note, if folder id is empty then a root folder will be listed.

        <argument name="id" class="str"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs folder" access="disown"/>
    </method>


    <method name="delete folder" is_const="1">
        Delete existing folder.

        <argument name="id" class="str"/>

        <return enum="status"/>
    </method>


    <method name="get shared group users" is_const="1">
        Get shared group of users.

        <argument name="id" class="str"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs access list" access="disown"/>
    </method>


    <method name="set shared group users" is_const="1">
        Set shared group of users.

        <argument name="id" class="str"/>
        <argument name="entry key" class="data"/>
        <argument name="users access" class="messenger cloud fs access list"/>

        <return enum="status"/>
    </method>


    <!-- Infos -->
    <method name="is authenticated" is_const="1">
        Return true if a user is authenticated.

        <return type="boolean"/>
    </method>


    <method name="user" is_const="1">
        Return information about current user.

        Prerequisites: user should be authenticated.

        <return class="messenger user"/>
    </method>


    <method name="user private key" is_const="1">
        Return a private key of current user.

        Prerequisites: user should be authenticated.

        <return interface="private key" project="foundation"/>
    </method>


    <method name="encrypt key" is_const="1" declaration="private">
        Encrypt file/folder key for:
            - myself;
            - parent folder key if given;
            - shared users.

        <argument name="key" class="data"/>
        <argument name="parent folder id" class="str"/>
        <argument name="parent folder public key" class="data"/>
        <argument name="shared users" class="messenger cloud fs access list"/>
        <argument name="error" class="error"/>

        <return class="buffer" access="disown"/>
    </method>


    <method name="decrypted key len" is_const="1">
        Return buffer length required to hold "decrypted key" written by the "decrypt key" method.

        <argument name="encrypted key" class="data"/>

        <return type="size"/>
    </method>


    <method name="decrypt key" is_const="1">
        Decrypt file/folder key with current user key:
        Note, issuer is a person who produced an encrypted key.

        <argument name="encrypted key" class="data"/>
        <argument name="issuer" class="messenger user"/>
        <argument name="decrypted key" class="buffer">
            <length method="decrypted key len">
                <proxy argument="encrypted key" to="encrypted key"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <method name="decrypt key with parent folder key" is_const="1">
        Decrypt file/folder key with a given parent folder key:
        Note, issuer is a person who produced an encrypted key.

        <argument name="encrypted key" class="data"/>
        <argument name="issuer" class="messenger user"/>
        <argument name="parent folder id" class="str"/>
        <argument name="parent folder key" class="data"/>
        <argument name="decrypted key" class="buffer">
            <length method="decrypted key len">
                <proxy argument="encrypted key" to="encrypted key"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <!-- Helpers -->
    <method name="create folder internal" is_const="1" declaration="private">
        Create a new folder within the Cloud FS.
        Note, if parent folder id is empty then folder created in a root folder.
        Note, if users are given then the folder will be shared for them.

        <argument name="name" class="str"/>
        <argument name="parent folder id" class="str"/>
        <argument name="parent folder public key" class="data"/>
        <argument name="users" class="messenger cloud fs access list"/>
        <argument name="error" class="error"/>

        <return class="messenger cloud fs folder info" access="disown"/>
    </method>


    <method name="generate key" is_const="1" declaration="private">
        Generate a private key and export it and public key to the binary format (DER).

        <argument name="private key buf" class="buffer" access="writeonly"/>
        <argument name="public key buf" class="buffer" access="writeonly"/>

        <return type="boolean"/>
    </method>


    <method name="decrypt key internal" is_const="1" declaration="private">
        Decrypt file/folder key with a given private key.

        <argument name="encrypted key" class="data"/>
        <argument name="issuer" class="messenger user"/>
        <argument name="key id" class="str"/>
        <argument name="key" interface="private key" project="foundation"/>
        <argument name="decrypted key" class="buffer">
            <length method="decrypted key len">
                <proxy argument="encrypted key" to="encrypted key"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>
</class>
