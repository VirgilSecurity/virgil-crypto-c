<class name="pythia" context="none">
    Provide Pythia implementation based on the Virgil Security.

    <require header="pythia_init.h" is_system="0"/>
    <require header="pythia_wrapper.h" is_system="0"/>
    <require header="pythia_buf_sizes.h" is_system="0"/>
    <require module="atomic"/>

    <require header="mbedtls/ctr_drbg.h"/>
    <require header="mbedtls/entropy.h"/>
    <require header="mbedtls/entropy_poll.h"/>


    <macros name="buffer from data" definition="private" is_method="1">
        Create pythia_buf_t object initializer from common class 'buffer'.

        <code>
            #define .(c_class_pythia_macros_buffer_from_data) (X) \
                    {.p = (uint8_t *)X.bytes, .allocated = X.len, .len = X.len}
        </code>
    </macros>


    <macros name="buffer from buffer" definition="private" is_method="1">
        Create pythia_buf_t object initializer from common class 'buffer'.

        <code>
            #define .(c_class_pythia_macros_buffer_from_buffer) (X) \
                    {.p = (uint8_t *)vsc_buffer_unused_bytes(X), .allocated = vsc_buffer_unused_len(X), .len = 0}
        </code>
    </macros>


    <method name="configure" is_static="1">
        Performs global initialization of the pythia library.

        Note, can be called multiple times, but actual configuration takes place once.
        Note, this method is thread-safe.

        <return enum="status"/>
    </method>


    <method name="cleanup" is_static="1">
        Performs global cleanup of the pythia library.

        Note, can be called multiple times, but actual cleanup takes place once.
        Note, should be called as many times, as "configure()" method called".
        Note, this method is thread-safe.
    </method>


    <method name="blinded password buf len" is_static="1">
        Return length of the buffer needed to hold 'blinded password'.

        <return type="size"/>
    </method>


    <method name="deblinded password buf len" is_static="1">
        Return length of the buffer needed to hold 'deblinded password'.

        <return type="size"/>
    </method>


    <method name="blinding secret buf len" is_static="1">
        Return length of the buffer needed to hold 'blinding secret'.

        <return type="size"/>
    </method>

    <method name="transformation private key buf len" is_static="1">
        Return length of the buffer needed to hold 'transformation private key'.

        <return type="size"/>
    </method>

    <method name="transformation public key buf len" is_static="1">
        Return length of the buffer needed to hold 'transformation public key'.

        <return type="size"/>
    </method>

    <method name="transformed password buf len" is_static="1">
        Return length of the buffer needed to hold 'transformed password'.

        <return type="size"/>
    </method>

    <method name="transformed tweak buf len" is_static="1">
        Return length of the buffer needed to hold 'transformed tweak'.

        <return type="size"/>
    </method>

    <method name="proof value buf len" is_static="1">
        Return length of the buffer needed to hold 'proof value'.

        <return type="size"/>
    </method>

    <method name="password update token buf len" is_static="1">
        Return length of the buffer needed to hold 'password update token'.

        <return type="size"/>
    </method>


    <method name="blind" is_static="1">
        Blinds password. Turns password into a pseudo-random string.
        This step is necessary to prevent 3rd-parties from knowledge of end user's password.

        <argument name="password" class="data"/>
        <argument name="blinded password" class="buffer">
            <length class="self" method="blinded password buf len"/>
        </argument>

        <argument name="blinding secret" class="buffer">
            <length class="self" method="blinding secret buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="deblind" is_static="1">
        Deblinds 'transformed password' value with previously returned 'blinding secret' from blind().

        <argument name="transformed password" class="data"/>
        <argument name="blinding secret" class="data"/>
        <argument name="deblinded password" class="buffer">
            <length class="self" method="deblinded password buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="compute transformation key pair" is_static="1">
        Computes transformation private and public key.

        <argument name="transformation key id" class="data"/>
        <argument name="pythia secret" class="data"/>
        <argument name="pythia scope secret" class="data"/>
        <argument name="transformation private key" class="buffer">
            <length class="self" method="transformation private key buf len"/>
        </argument>

        <argument name="transformation public key" class="buffer">
            <length class="self" method="transformation public key buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="transform" is_static="1">
        Transforms blinded password using transformation private key.

        <argument name="blinded password" class="data"/>
        <argument name="tweak" class="data"/>
        <argument name="transformation private key" class="data"/>
        <argument name="transformed password" class="buffer">
            <length class="self" method="transformed password buf len"/>
        </argument>

        <argument name="transformed tweak" class="buffer">
            <length class="self" method="transformed tweak buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="prove" is_static="1">
        Generates proof that server possesses secret values that were used to transform password.

        <argument name="transformed password" class="data"/>
        <argument name="blinded password" class="data"/>
        <argument name="transformed tweak" class="data"/>
        <argument name="transformation private key" class="data"/>
        <argument name="transformation public key" class="data"/>

        <argument name="proof value c" class="buffer">
            <length class="self" method="proof value buf len"/>
        </argument>

        <argument name="proof value u" class="buffer">
            <length class="self" method="proof value buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="verify" is_static="1">
        This operation allows client to verify that the output of transform() is correct,
        assuming that client has previously stored transformation public key.

        <argument name="transformed password" class="data"/>
        <argument name="blinded password" class="data"/>
        <argument name="tweak" class="data"/>
        <argument name="transformation public key" class="data"/>
        <argument name="proof value c" class="data"/>
        <argument name="proof value u" class="data"/>
        <argument name="error" class="error" access="readwrite"/>

        <return type="boolean"/>
    </method>


    <method name="get password update token" is_static="1">
        Rotates old transformation key to new transformation key and generates 'password update token',
        that can update 'deblinded password'(s).

        This action should increment version of the 'pythia scope secret'.

        <argument name="previous transformation private key" class="data"/>
        <argument name="new transformation private key" class="data"/>
        <argument name="password update token" class="buffer">
            <length class="self" method="password update token buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="update deblinded with token" is_static="1">
        Updates previously stored 'deblinded password' with 'password update token'.
        After this call, 'transform()' called with new arguments will return corresponding values.

        <argument name="deblinded password" class="data"/>
        <argument name="password update token" class="data"/>
        <argument name="updated deblinded password" class="buffer">
            <length class="self" method="deblinded password buf len"/>
        </argument>


        <return enum="status"/>
    </method>


    <method name="random handler" declaration="private" is_static="1">
        Callback for the pythia random.

        <argument name="out" type="byte" access="writeonly">
            <array length="given"/>
        </argument>
        <argument name="out len" type="integer"/>
        <argument name="ctx" type="nothing" access="readwrite" is_reference="1"/>
    </method>
</class>
