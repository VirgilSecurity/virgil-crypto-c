<class name="json object">
    Minimal JSON object.

    <require header="json-c/json.h" library="json-c" scope="context"/>
    <require header="json-c/json.h" library="json-c" scope="private" definition="public"/>
    <require class="str mutable" project="common"/>
    <require class="base64" project="foundation"/>
    <require module="base64 private" project="foundation"/>
    <require class="json array"/>
    <require module="json array defs"/>
    <require module="json array private"/>

    <property name="json obj" class="json_object" library="json-c"/>


    <struct name="json array" of_class="json array" declaration="public" definition="external">
        Forward declaration.
    </struct>


    <constructor name="with json obj" declaration="private">
        Create with predefined JSON object.

        <argument name="json obj" class="json_object" library="json-c" access="disown"/>
    </constructor>


    <method name="create with json obj" is_static="1" scope="private">
        Create with predefined JSON object.

        <argument name="json obj" class="json_object" library="json-c" access="disown"/>

        <return class="self" access="disown"/>
    </method>


    <method name="is empty" is_const="1">
        Return true if object has no fields.

        <return type="boolean"/>
    </method>


    <method name="add string value">
        Add string value with a given key.

        <argument name="key" class="str"/>
        <argument name="value" class="str"/>
    </method>


    <method name="get string value" is_const="1">
        Return a string value for a given key.
        Return error, if given key is not found or type mismatch.

        <argument name="key" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="str"/>
    </method>


    <method name="add binary value">
        Add binary value with a given key.
        Given binary value is base64 encoded first

        <argument name="key" class="str"/>
        <argument name="value" class="data"/>
    </method>


    <method name="get binary value len" is_const="1">
        Return buffer length required to hold a binary value for a given key.
        Returns 0, if given key is not found or type mismatch.

        <argument name="key" class="str"/>

        <return type="size"/>
    </method>


    <method name="get binary value" is_const="1">
        Return a binary value for a given key.
        Return error, if given key is not found or type mismatch.
        Return error, if base64 decode failed.

        <argument name="key" class="str"/>

        <argument name="value" class="buffer">
            <length method="get binary value len">
                <proxy argument="key" to="key"/>
            </length>
        </argument>

        <return enum="status"/>
    </method>


    <method name="get binary value new" is_const="1" scope="private">
        Return a binary value for a given key.
        Return error, if given key is not found or type mismatch.
        Return error, if base64 decode failed.

        <argument name="key" class="str"/>
        <argument name="error" class="error"/>

        <return class="buffer" access="disown"/>
    </method>


    <method name="add int value">
        Add integer value with a given key.

        <argument name="key" class="str"/>
        <argument name="value" type="integer"/>
    </method>


    <method name="get int value" is_const="1">
        Return an integer value for a given key.
        Return error, if given key is not found or type mismatch.

        <argument name="key" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return type="integer"/>
    </method>


    <method name="add object value">
        Add object value with a given key.

        <argument name="key" class="str"/>
        <argument name="value" class="self" access="readonly"/>
    </method>


    <method name="get object value" is_const="1">
        Return an object value for a given key.
        Return error, if given key is not found or type mismatch.

        <argument name="key" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="self" access="disown"/>
    </method>


    <method name="add array value">
        Add array value with a given key.

        <argument name="key" class="str"/>
        <argument name="value" class="json array"/>
    </method>


    <method name="add array value disown" scope="private">
        Add array value with a given key.

        <argument name="key" class="str"/>
        <argument name="value" class="json array" access="disown"/>
    </method>


    <method name="get array value" is_const="1">
        Return an array value for a given key.
        Return error, if given key is not found or type mismatch.

        <argument name="key" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="json array" access="disown"/>
    </method>


    <method name="as str" is_const="1">
        Return JSON body as string.

        <return class="str"/>
    </method>


    <method name="parse" is_static="1">
        Parse a given JSON string.

        <argument name="json" class="str"/>
        <argument name="error" class="error" access="readwrite"/>

        <return class="self"/>
    </method>
</class>
