<module name="memory" of_class="global">
    Provides configurable memory management model.

    <require header="stdio.h" is_system="1"/>
    <require header="stdarg.h" is_system="1"/>
    <require module="library" definition="public"/>
    <require module="assert"/>


    <macroses definition="private">
        Include external platform header if defined.

        <code>
            #ifdef VIRGIL_PLATFORM_INCLUDE_STATEMENT
            #   include VIRGIL_PLATFORM_INCLUDE_STATEMENT
            #endif
        </code>
    </macroses>


    <macros name="alloc default" is_method="1" definition="private">
        Compile-time configuration of the default alloc function.

        <code>
            #ifdef VIRGIL_PLATFORM_ALLOC
            #   define .(c_global_macros_alloc_default)(size) VIRGIL_PLATFORM_ALLOC((size))
            #else
            #   define .(c_global_macros_alloc_default)(size) calloc(1, (size))
            #endif
        </code>
    </macros>


    <macros name="dealloc default" is_method="1" definition="private">
        Compile-time configuration of the default dealloc function.

        <code>
            #ifdef VIRGIL_PLATFORM_DEALLOC
            #   define .(c_global_macros_dealloc_default)(mem) VIRGIL_PLATFORM_DEALLOC(mem)
            #else
            #   define .(c_global_macros_dealloc_default)(mem) free((mem))
            #endif
        </code>
    </macros>


    <variable name="inner alloc"
              callback=".(global_callback_alloc)"
              of_class="memory"
              declaration="private"
              definition="private"
              access="readwrite">

        Current allocation function.

        <value value=".(c_global_method_default_alloc)"/>
    </variable>


    <variable name="inner dealloc"
              callback=".(global_callback_dealloc)"
              of_class="memory"
              declaration="private"
              definition="private"
              access="readwrite">

        Current de-allocation function.

        <value value=".(c_global_method_default_dealloc)"/>
    </variable>


    <method name="default alloc" declaration="private" definition="private" visibility="private">
        Default allocation function, that is configured during compilation.

        <argument name="size" type="size"/>

        <return class="any" access="disown"/>

        <code>
            return .(c_global_macros_alloc_default)(.(_argument_size));
        </code>
    </method>


    <method name="default dealloc" declaration="private" definition="private" visibility="private">
        Default de-allocation function, that is configured during compilation.

        <argument name="mem" class="any" access="writeonly"/>

        <code>
            .(c_global_macros_dealloc_default)(.(_argument_mem));
        </code>
    </method>


    <method name="alloc">
        Allocate required amount of memory by usging current allocation function.
        Returns NULL if memory allocation fails.

        <argument name="size" type="size"/>

        <return class="any" access="disown"/>

        <code>
            return .(c_class_memory_variable_inner_alloc)(.(_argument_size));
        </code>
    </method>


    <method name="calloc">
        Allocate required amount of memory by usging current allocation function.
        Returns NULL if memory allocation fails.

        <argument name="count" type="size"/>
        <argument name="size" type="size"/>

        <return class="any" access="disown"/>

        <code>
            return .(c_class_memory_variable_inner_alloc)(.(_argument_count) * .(_argument_size));
        </code>
    </method>


    <method name="dealloc">
        Deallocate given memory by usging current de-allocation function.

        <argument name="mem" class="any" access="writeonly"/>

        <code>
            .(c_class_memory_variable_inner_dealloc)(.(_argument_mem));
        </code>
    </method>


    <method name="set_allocators">
        Change current used memory functions in the runtime.

        <argument name="alloc" callback=".(global_callback_alloc)"/>
        <argument name="dealloc" callback=".(global_callback_dealloc)"/>

        <code>
            .(c_class_assert_macros_ptr)(.(_argument_alloc));
            .(c_class_assert_macros_ptr)(.(_argument_dealloc));

            .(c_class_memory_variable_inner_alloc) = .(_argument_alloc);
            .(c_class_memory_variable_inner_dealloc) = .(_argument_dealloc);
        </code>
    </method>


    <method name="zeroize">
        Zeroize memory.
        Note, this function can be reduced by compiler during optimization step.
        For sensitive data erasing use .(c_global_method_erase)().

        <argument name="mem" class="any" access="writeonly"/>
        <argument name="size" type="size"/>

        <code>
            .(c_class_assert_macros_ptr)(.(_argument_mem));
            memset(.(_argument_mem), 0, .(_argument_size));
        </code>
    </method>


    <method name="erase">
        Zeroize memory in a secure manner.
        Compiler can not reduce this function during optimization step.

        <argument name="mem" class="any" access="writeonly"/>
        <argument name="size" type="size"/>

        <code>
            .(c_class_assert_macros_ptr)(.(_argument_mem));

            volatile uint8_t* p = (uint8_t*).(_argument_mem);
            while (.(_argument_size)--) { *p++ = 0; }
        </code>
    </method>


    <method name="secure equal" of_class="memory">
        Perform constant-time memory comparison.
        The time depends on the given length but not on the compared memory.
        Return true of given memory chunks are equal.

        <argument name="a" class="any"/>
        <argument name="b" class="any"/>
        <argument name="len" type="size"/>
        <return type="boolean"/>

        <code>
            .(c_class_assert_macros_ptr)(.(_argument_a));
            .(c_class_assert_macros_ptr)(.(_argument_b));

            const volatile uint8_t *in_a = a;
            const volatile uint8_t *in_b = b;
            volatile uint8_t c = 0x00;

            for (size_t i = 0; i &lt; len; ++i) {
                c |= in_a[i] ^ in_b[i];
            }

            return c == 0;
        </code>
    </method>

    <method name="strnstr">
        Find the first occurrence of find in s, where the search is limited to the
        first slen characters of s.

        <argument name="s" type="string"/>
        <argument name="find" type="string"/>
        <argument name="slen" type="size"/>
        <return type="string" access="readwrite"/>

        <code>
            /*-
             * Copyright (c) 2001 Mike Barcroft &lt;mike@FreeBSD.org&gt;
             * Copyright (c) 1990, 1993
             *  The Regents of the University of California.  All rights reserved.
             *
             * This code is derived from software contributed to Berkeley by
             * Chris Torek.
             *
             * Redistribution and use in source and binary forms, with or without
             * modification, are permitted provided that the following conditions
             * are met:
             * 1. Redistributions of source code must retain the above copyright
             *    notice, this list of conditions and the following disclaimer.
             * 2. Redistributions in binary form must reproduce the above copyright
             *    notice, this list of conditions and the following disclaimer in the
             *    documentation and/or other materials provided with the distribution.
             * 3. All advertising materials mentioning features or use of this software
             *    must display the following acknowledgement:
             *  This product includes software developed by the University of
             *  California, Berkeley and its contributors.
             * 4. Neither the name of the University nor the names of its contributors
             *    may be used to endorse or promote products derived from this software
             *    without specific prior written permission.
             *
             * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
             * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
             * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
             * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
             * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
             * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
             * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
             * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
             * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
             * SUCH DAMAGE.
             */

            char c, sc;
            size_t len;

            if ((c = *find++) != '\\0') {
                len = strlen(find);
                do {
                    do {
                        if (slen-- &lt; 1 || (sc = *s++) == '\\0') // Fixed by Virgil Security, Inc.
                            return (NULL);
                    } while (sc != c);
                    if (len &gt; slen)
                        return (NULL);
                } while (strncmp(s, find, len) != 0);
                s--;
            }
            return ((char *)s);
        </code>
    </method>


    <method name="snprintf">
      Fixed version of the snprintf().

      <argument name="s" type="string" access="readwrite"/>
      <argument name="n" type="size"/>
      <argument name="format" type="string"/>
      <argument name="args" type="varargs"/>

      <return type="integer"/>

      <code>
          va_list args;
          int ret;
          va_start(args, format);

          #if defined(__MINGW32__)
              ret = __mingw_vsnprintf(s, n, format, args);
          #else
              ret = vsnprintf(s, n, format, args);
          #endif

          va_end(args);
          return ret;
      </code>
    </method>
</module>
