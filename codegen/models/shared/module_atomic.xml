<module name="atomic" scope="private" is_header_only="1">
    This module contains macroses for cross-platform atomicity.

    <require module="library"/>

    <c_include file="stdatomic.h" scope="public" is_system="1" if=".(c_global_macros_have_stdatomic_h)" />


    <method name="compare exchange weak" declaration="external" definition="external"/>
    <code definition="public">
        #if .(c_global_macros_multi_threading) &amp;&amp; defined(_MSC_VER) &amp;&amp; !defined(__INTEL_COMPILER)
        #   pragma intrinsic(_InterlockedCompareExchange)
            inline bool .(c_class_atomic_method_compare_exchange_weak)(volatile long *obj, long* expected, long desired) {
                const long expected_local = *expected;
                const long old = _InterlockedCompareExchange(obj, desired, expected_local);
                if (old == expected_local) {
                    return true;
                } else {
                    *expected = old;
                    return false;
                }
            }
        #endif
    </code>

    <macroses>
        <macros name="atomic"/>
        <macros name="compare exchange weak"/>
        <code>
            #if .(c_global_macros_multi_threading)
            #   if .(c_global_macros_have_stdatomic_h) &amp;&amp; !defined(__STDC_NO_ATOMICS__)
            #       define .(c_class_atomic_macros_atomic) _Atomic
            #       define .(c_class_atomic_macros_compare_exchange_weak)(obj, expected, desired) atomic_compare_exchange_weak(obj, expected, desired)
            #   elif defined(__GNUC__) || defined(__clang__)
            #       define .(c_class_atomic_macros_compare_exchange_weak)(obj, expected, desired) __atomic_compare_exchange_n(obj, expected, desired, 1, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)
            #   elif defined(_MSC_VER) &amp;&amp; !defined(__INTEL_COMPILER)
            #       define .(c_class_atomic_macros_compare_exchange_weak)(obj, expected, desired) .(c_class_atomic_method_compare_exchange_weak)(obj, expected, desired)
            #   else
            #       error "Atomic operations are not suppored for this platform, but CMake option .(c_global_macros_multi_threading) is ON."
            #   endif
            #   ifndef .(c_class_atomic_macros_atomic)
            #       define .(c_class_atomic_macros_atomic)
            #   endif
            #else
            #   define .(c_class_atomic_macros_atomic)
            #endif
        </code>
    </macroses>

    <macroses>
        <macros name="critical section declare"/>
        <macros name="critical section begin"/>
        <macros name="critical section end"/>
        <code>
            #if defined(.(c_class_atomic_macros_compare_exchange_weak))
            #   define .(c_class_atomic_macros_critical_section_declare)(name) static .(c_class_atomic_macros_atomic) int is_busy_##name = 0; int is_not_busy_##name = 0;
            #   define .(c_class_atomic_macros_critical_section_begin)(name)  do { is_not_busy_##name = 0; } while (!.(c_class_atomic_macros_compare_exchange_weak)(&is_busy_##name, &is_not_busy_##name, 1))
            #   define .(c_class_atomic_macros_critical_section_end)(name) do { is_busy_##name = 0; } while(0)
            #else
            #   define .(c_class_atomic_macros_critical_section_declare)(name) do {} while(0)
            #   define .(c_class_atomic_macros_critical_section_begin)(name) do {} while(0)
            #   define .(c_class_atomic_macros_critical_section_end)(name) do {} while(0)
            #endif
        </code>
    </macroses>
</module>
