<module name="assert">
    Implements custom assert mechanism, which:
        - allows to choose assertion handler from predefined set,
          or provide custom assertion handler;
        - allows to choose which assertion leave in production build.

    <require module="library" definition="public" />
    <require module="memory" definition="private" />

    <c_include file="stdio.h" definition="private" is_system="1" />
    <c_include file="assert.h" definition="private" is_system="1" if=".(c_global_macros_have_assert_h)" />

    <callback name="handler">
        Assertion handler callback type.

        <argument name="message" type="string" />
        <argument name="file" type="string" />
        <argument name="line" type="integer" />
    </callback>


    <variable
            name="active handler"
            callback=".(class_assert_callback_handler)"
            visibility="private"
            declaration="private"
            definition="private"
            access="readwrite">

        Active handler for assertion fail.

        <value value=".(class_assert_method_abort)" />
    </variable>


    <method name="change handler">
        Change active assertion handler.

        <argument name="handler" callback=".(class_assert_callback_handler)" />

        <code lang="c">
            .(c_class_assert_macros_assert) (handler_cb);
            .(c_class_assert_variable_active_handler) = handler_cb;
        </code>
    </method>


    <method name="abort">
        Assertion handler, that print given information and abort program.
        This is default handler.

        <argument name="message" type="string" />
        <argument name="file" type="string" />
        <argument name="line" type="integer" />
        <code lang="c">
            printf(&quot;Assertion failed: %s, file %s, line %d\\n&quot;,
                    message, .(c_class_assert_method_path_basename) (file), line);

            printf(&quot;Abort&quot;);
            fflush(stdout);

            abort();
        </code>
    </method>


    <method name="trigger">
        Trigger active assertion handler.

        <argument name="message" type="string" />
        <argument name="file" type="string" />
        <argument name="line" type="integer" />
        <code lang="c">
             .(c_class_assert_variable_active_handler) (message, file, line);
        </code>
    </method>


    <method name="path basename" declaration="private" definition="private" visibility="private">
        Return pointer to the last component in the path.

        <return type="string" />

        <argument name="path" type="string" />

        <code lang="c">
            const char *result = path;
            for ( \
                    const char *symbol = path; \
                    *symbol != '\\0' &amp;&amp; \
                    (symbol - path &lt; 255); \
                    ++symbol) {

                const char *next_symbol = symbol + 1;

                if (*next_symbol != '\\0' &amp;&amp; (*symbol == '\\\\' || *symbol == '/')) {
                    result = next_symbol;
                }
            }

            return result;
        </code>
    </method>


    <macros name="file path or name" of_class="global">
        Contains file path or file name.

        <code lang="c">
            #if defined (__FILENAME__)
            #   define .(c_global_macros_file_path_or_name) __FILENAME__
            #else
            #   define .(c_global_macros_file_path_or_name) __FILE__
            #endif
        </code>
    </macros>


    <macros name="internal" is_method="1">
        Asserts always.

        <code lang="c">
            #define .(c_class_assert_macros_internal)(X)
                do {
                    if (!(X)) {
                        .(c_class_assert_method_trigger) (#X, .(c_global_macros_file_path_or_name), __LINE__);
                    }
                } while (false)
        </code>
    </macros>


    <macros name="opt" is_method="1">
        Asserts even in optimized mode.

        <code lang="c">
            #define .(c_class_assert_macros_opt)(X) .(c_class_assert_macros_internal)(X)
        </code>
    </macros>


    <macros name="assert" is_method="1">
        Default assert, that is enabled in debug mode.

        <code lang="c">
            #define .(c_class_assert_macros_assert)(X) .(c_class_assert_macros_internal)(X)
        </code>
    </macros>


    <macros name="safe" is_method="1">
        Heavy assert, that is enabled in a special (safe) cases.

        <code lang="c">
            #define .(c_class_assert_macros_safe)(X) .(c_class_assert_macros_internal)(X)
        </code>
    </macros>


    <macros name="static" is_method="1">
        Asserts during compilation. Has no runtime impact.

        <code lang="c">
            #define .(c_class_assert_macros_static)(X) (void) sizeof(char[(X) ? 1 : -1])
        </code>
    </macros>


    <macros name="ptr" is_method="1">
        Assert that given pointer is not NULL. It is enabled in debug mode.

        <code lang="c">
            #define .(c_class_assert_macros_ptr)(X)
                do {
                    if (!(X)) {
                        .(c_class_assert_method_trigger) (#X" != NULL", \
                                .(c_global_macros_file_path_or_name), __LINE__);
                    }
                } while (false)
        </code>
    </macros>


    <macros name="ref" is_method="1">
        Assert that given reference is not NULL. And reference pointer is not NULL too.
        It is enabled in debug mode.

        <code lang="c">
            #define .(c_class_assert_macros_ref)(X)
                do {
                    .(c_class_assert_macros_ptr)(X);
                    .(c_class_assert_macros_ptr)(*X);
                } while (false)
        </code>
    </macros>


    <macros name="null" is_method="1">
        Assert that given pointer is NULL. It is enabled in debug mode.

        <code lang="c">
            #define .(c_class_assert_macros_null)(X)
                do {
                    if(X) {
                        .(c_class_assert_method_trigger) (#X" == NULL", \
                                .(c_global_macros_file_path_or_name), __LINE__);
                    }
                } while (false)
        </code>
    </macros>


    <macros name="alloc" is_method="1">
        Assert that memory was successfully allocated.
        This macros is enabled by default and can be disabled by special macros.

        <code lang="c">
            #define .(c_class_assert_macros_alloc)(X)
                do {
                    if (!(X)) {
                        .(c_class_assert_method_trigger) ("No memory", \
                                .(c_global_macros_file_path_or_name), __LINE__);
                    }
                } while (false)
        </code>
    </macros>
 </module>
