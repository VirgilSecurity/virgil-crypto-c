.template 0
#   Copyright (C) 2015-2018 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Transform abstract 'interface' declaration to the C language components.
#
#   Interfaces in C is has custom implementation, because of C does not have
#   native support for it. In two words, interface in the C is represented
#   with three APIs: 'Shared API', 'Usage API' and 'Implementation API'.
#   'Shared API' is fully generated module that contains enumeration of all
#   possibly available interfaces in the crypto library and related helpers.
#   'Usage API' is fully generated module which contains functions that
#   make proxy calls to the actual implementation thru callbacks, which in
#   turn, are defined in the 'Implementation API' within C struct.
#
#   Also all interfaces has common / shared component that enumerates them
#   and possibly contains some helper functions.
#
#   Private function prefix is: L23.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"

gsl from "c_formatter.gsl"
gsl from "c_component.gsl"

# ---------------------------------------------------------------------------
#   Format method parameters.
#   Precondition: 'method' must be resolved.
# ---------------------------------------------------------------------------
function _L23_format_proxy_arguments (method, beginning, ending, tab_count, line_limit)
    check_argument (my, "method")
    check_argument (my, "beginning")

    my.ending ?= ""
    my.ending = ")" + my.ending
    my.tab_count ?= 0
    my.line_limit ?= 100
    my.line = "("
    my.result = ""
    my.indent = tabs (my.tab_count)
    for my.method.argument
        my.adding_line = ""
        my.adding_line += ref ("_argument", argument.name)
        if ! last ()
            my.adding_line += ","
        else
            my.adding_line += my.ending
        endif
        my.line += (first() ?? "" ? " ") + my.adding_line
    else
        my.line += my.ending
    endfor
    if ! string_empty (my.line)
        my.result += my.line
    endif
    return my.result
endfunction


# ---------------------------------------------------------------------------
#   Add interface API type with requirements to implementation.
# ---------------------------------------------------------------------------
function _L23_add_interface_api_type (interface, declaration, definition, destination, meta)
    check_arguments (my, "interface, declaration, definition, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new struct to my.destination
        . = "Contains API requirements of the interface '$(my.interface.name:)'."
        .name = my.names.interface_struct_api
        .of_class = my.names.interface_class_api

        .declaration = my.declaration
        .definition = my.definition

        new property to struct
            . = "\
                API's unique identifier, MUST be first in the structure.
                For interface '$(my.interface.name:c)' MUST be equal to the \
                '$(my.refs.c_interface_constant_tag)'."

            .name = my.names.property_api_tag
            .enum = my.refs.class_api_enum_tag
            .value = my.refs.interface_constant_tag
            .tag = "tag"
        endnew

        for my.interface.inherit
            assert_attribute (inherit, "interface", my)

            new property to struct
                . = "Link to the inherited interface API '$(inherit.interface:)'."
                .name = my.names.property_inherited_$(make_id(inherit.interface))_api
                .class = my.refs.class_inherited_$(make_id(inherit.interface))_api
                .tag = "api"
            endnew
        endfor

        for my.interface.method
            new property to struct
                . = method. ?
                .name = method.name
                .callback = my.refs.interface_callback_$(make_id (method.name))
                .tag = "method"
            endnew
        endfor

        for my.interface.constant
            my.property = item_copy_to (constant, struct, "property")
            my.property.tag = "constant"
        endfor
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Add calback type for each interface function.
# ---------------------------------------------------------------------------
function _L23_add_interface_api_callbacks (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    for my.interface.method
        my.callback = item_copy_to (method, my.destination, "callback")
        my.callback. = ("Callback. " + string_trim(my.callback.)) ?

        if method.context = "impl"
            component_create_argument_impl (my.callback)
        endif
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Add interface tag to the common interfaces enumeration type.
# ---------------------------------------------------------------------------
function _L23_add_self_tag (interface, enum, meta)
    check_arguments (my, "interface, enum, meta", my)

    my.names = meta_names (my.meta)

    my.end = my.enum->constant (name = my.names.enum_constant_end)
    if ! defined (my.end)
        echo_fatal ("Enum '$(my.enum.name:)' does not contain constant '$(enum_constant_end:)'.", my)
    endif

    new constant before my.end
        .name = my.interface.name
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Add interface stateFUL methods to the destination.
#   Stateful method always accept object as first argument that implements
#   this interface and handles state.
# ---------------------------------------------------------------------------
function _L23_add_stateful_methods (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.method where context = "impl"

        my.api_name = my.names.c_interface_struct_api
        my.api_type = my.refs.c_interface_struct_api

        my.proxy_method = item_copy_to (method, my.destination)

        component_create_argument_impl (my.proxy_method)

        my.has_return = count (method.[return], defined (type) & type <> "nothing")
        my.callback = "$(my.api_name:)->$(c_format_callback_name (method.name))"
        my.callback_parameters = _L23_format_proxy_arguments (my.proxy_method, string_indent (my.callback, 1), ";")


        new implementation to my.proxy_method
            . = "\
            const $(my.api_type:) *$(my.api_name:) = $(my.refs.c_interface_method_api) (.(_argument_impl));
            .(c_class_assert_macros_ptr) ($(my.api_name:));

            .(c_class_assert_macros_ptr) ($(my.callback:));
            $(my.has_return ?? "return " ?)$(my.callback:) $(my.callback_parameters:)
            "
        endnew
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Add interface sateLESS methods to the destination.
#   Stateless method always accept constant object that handles interface
#   implementation callbacks.
# ---------------------------------------------------------------------------
function _L23_add_stateless_methods (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.method where context = "api"
        my.proxy_method = item_copy_to (method, my.destination)

        my.api_name = ".(_argument_$(my.names.c_interface_struct_api:))"
        my.api_type = my.refs.c_interface_struct_api

        my.has_return = count (method.[return], defined (type) & type <> "nothing")
        my.callback = "$(my.api_name:)->$(c_format_callback_name (method.name))"
        my.callback_parameters = _L23_format_proxy_arguments (my.proxy_method, string_indent (my.callback, 1), ";")

        interface_create_api_argument (my.interface, my.proxy_method, my.meta)

        new implementation to my.proxy_method
            . = "\
            .(c_class_assert_macros_ptr) ($(my.api_name:));

            .(c_class_assert_macros_ptr) ($(my.callback:));
            $(my.has_return ?? "return " ?)$(my.callback:) $(my.callback_parameters:)
            "
        endnew
    endfor
endfunction


# ---------------------------------------------------------------------------
#   For each 'constant' add 'get' accessors to the destination.
# ---------------------------------------------------------------------------
function _L23_add_stateless_getters (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.interface.constant
        new method to my.destination
            . = "Returns constant '$(constant.name:)'."
            .name = constant.name

            interface_create_api_argument (my.interface, method, my.meta)

            new return to method
                .type = "size"
            endnew

            my.api_name = ".(_argument_$(my.names.c_interface_struct_api:))"
            my.constant_name = my.names.c_interface_constant_$(make_id (constant.name))
            new implementation to method
                . = "\
                .(c_class_assert_macros_ptr) ($(my.api_name:));

                return $(my.api_name:)->$(my.constant_name:);
                "
            endnew
        endnew
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Add method that returns 'API' object.
# ---------------------------------------------------------------------------
function _L23_add_method_get_api (interface, destination, meta)
    check_arguments (my, "interface, destination, meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "Return $(my.interface.name:) API, or NULL if it is not implemented."

        .name = my.names.class_api

        component_create_argument_impl (method)

        new return
            .class = my.refs.interface_struct_api
        endnew

        my.api_name = my.names.c_interface_struct_api
        my.api_type = my.refs.c_interface_struct_api

        new implementation
            . = "\
            .(c_class_assert_macros_ptr) (.(_argument_impl));

            const .(c_class_api_struct_api) *api = \
                    .(c_class_impl_method_api) (.(_argument_impl), $(my.refs.c_interface_constant_tag));
            return (const $(my.api_type:) *) api;
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Add method that returns size of 'API' type.
# ---------------------------------------------------------------------------
function _L23_add_method_get_api_size (interface, destination, meta)
    check_arguments (my, "interface, destination, meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "Return size of '$(my.refs.c_interface_struct_api)' type."

        .name = cat (my.names.class_api, "size")

        new return
            .type = "size"
        endnew

        new implementation
            . = "\
            return sizeof($(my.refs.c_interface_struct_api));
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Add method that check if 'API' is implemented.
# ---------------------------------------------------------------------------
function _L23_add_method_check_api (interface, destination, meta)
    check_arguments (my, "interface. destination, meta")

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        . = "Check if given object implements interface '$(my.interface.name:)'."

        .name = "is implemented"

       component_create_argument_impl (method)

        new return
            .type = "boolean"
        endnew

        my.api_name = my.names.c_interface_struct_api

        new implementation
            . = "\
            .(c_class_assert_macros_ptr) (.(_argument_impl));

            return .(c_class_impl_method_api) (.(_argument_impl), $(my.refs.c_interface_constant_tag)) != NULL;
            "
        endnew
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Create module with 'Interface Public API'.
# ---------------------------------------------------------------------------
function c_module_interface_create_module_public (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination
        . = my.interface. ?
        .name = my.names.module_interface
        .of_class = my.names.class_interface
        .interface = my.interface.name

        new require
            .module = my.names.module_library
        endnew

        new require
            .module = my.names.module_assert
            .scope = "private"
        endnew

        new require
            .module = my.names.module_impl
        endnew

        new require
            .module = my.names.interface_module_api
            .scope = "private"
        endnew

        for my.interface.inherit
            new require to module
                .module = inherit.interface
            endnew
        endfor

        my.enum_tag = c_module_api_find_enum_tag (my.destination, my.meta)
        _L23_add_self_tag (my.interface, my.enum_tag, my.meta)
        _L23_add_interface_api_type (my.interface, "public", "external", module, my.meta)
        _L23_add_stateful_methods (my.interface, module, my.meta)
        _L23_add_stateless_methods (my.interface, module, my.meta)
        _L23_add_stateless_getters (my.interface, module, my.meta)
        _L23_add_method_get_api (my.interface, module, my.meta)
        _L23_add_method_get_api_size (my.interface, module, my.meta)
        _L23_add_method_check_api (my.interface, module, my.meta)
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Create module with 'Interface API' type definition.
# ---------------------------------------------------------------------------
function c_module_interface_create_module_api (interface, destination, meta)
    check_arguments (my, "interface, destination, meta", my)

    my.names = meta_names (my.meta)

    new module to my.destination
        . = "Interface '$(my.interface.name:)' API."
        .name = my.names.interface_module_api
        .of_class = my.names.interface_class_api
        .scope = "private"

        new require to module
            .module = my.names.module_library
        endnew

        new require to module
            .module = my.names.module_api
        endnew

        new require to module
            .module = my.names.module_impl
        endnew

        for my.interface.inherit
            new require to module
                .module = inherit.interface
            endnew
        endfor

        _L23_add_interface_api_type (my.interface, "external", "public", module, my.meta)
        _L23_add_interface_api_callbacks (my.interface, module, my.meta)
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Entrypoint. Create 2 modules with:
#       - interface public API
#       - interface API type definition
# ---------------------------------------------------------------------------
function c_module_interface_create (source, destination, meta)
    check_arguments (my, "source, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    for my.source.interface
        meta_reset_active_entity (my.meta, interface.name)

        c_module_interface_create_module_public (interface, my.destination, my.meta)
        c_module_interface_create_module_api (interface, my.destination, my.meta)
    endfor

endfunction


# ---------------------------------------------------------------------------
#   Return 'module' that contains 'Interface Private API'.
# ---------------------------------------------------------------------------
function c_module_interface_find (name, source)
    check_arguments (my, "name, source", my)

    my.interface = my.source->interface (name = my.name)

    if defined (my.interface)
        return my.interface
    endif

    echo_fatal ("Interface '$(my.name:)' is not found within given source.", my)
endfunction


# ---------------------------------------------------------------------------
#   Return 'struct' that describes 'Interface API type'.
# ---------------------------------------------------------------------------
function c_module_interface_find_api_type (name, source, meta)
    check_arguments (my, "name, source, meta", my)

    meta_activate_entity (my.meta, my.name)
    my.names = meta_names (my.meta)

    my.interface_api_module = my.source->module (name = my.names.interface_module_api) ?
    assert_attribute (my, "interface_api_module", my)

    my.api_type = my.interface_api_module->struct (struct.name = my.names.interface_class_api) ?
    assert_attribute (my, "api_type", my)

    meta_deactivate_entity (my.meta, my.name)

    return my.api_type
endfunction

.endtemplate
