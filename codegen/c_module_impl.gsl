.template 0
#   Copyright (C) 2015-2021 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with 'Shared Implementation Public API'.
#   Private function prefix is: L24.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "meta.gsl"


# ---------------------------------------------------------------------------
#   Add opaque declaration for generic 'implementation' type.
# ---------------------------------------------------------------------------
function _L24_add_type_self (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new struct to my.destination
        . = "Generic type for any 'implementation'."

        .name = my.names.module_impl
        .declaration = "public"
        .definition = "external"
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Add type that enumerates all possible implementations within crypto.
# ---------------------------------------------------------------------------
function _L24_add_enum_tag (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new enum to my.destination
        . = "Enumerates all possible implementations within crypto library."

        .name = my.names.enum_tag
        .of_class = my.names.class_impl
        .definition = "public"

        new constant
            .name = my.names.enum_constant_begin
            .value = "0"
        endnew

        new constant
            .name = my.names.enum_constant_end
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add method that return 'API' with implementation's meta information.
# ---------------------------------------------------------------------------
function _L24_add_method_get_api (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new method to my.destination
        . = "\
        Return 'API' object that is fulfiled with a meta information
        specific to the given implementation object.
        Or NULL if object does not implement requested 'API'.
        "

        .name = my.names.method_api
        .is_const = "1"

        new return
            .class = ".(class_api_struct_api)"
        endnew

        component_create_argument_impl (method, my.meta)

        new argument
            .name = my.names.argument_api_tag
            .enum = ".(class_api_enum_tag)"
        endnew

        new code
            . = "\
            .(c_class_assert_macros_ptr)(.(_argument_impl));
            .(c_class_assert_macros_ptr)(.(_argument_impl)->info);

            if (.(_argument_impl)->info->find_api_cb == NULL) {
                return NULL;
            }

            return .(_argument_impl)->info->find_api_cb(.(_argument_api_tag));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add method that return unique 'Implementation TAG'.
# ---------------------------------------------------------------------------
function _L24_add_method_get_tag (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new method to my.destination
        . = "\Return unique 'Implementation TAG'."

        .name = my.names.enum_tag
        .is_const = "1"

        new return
            .enum = ".(class_impl_enum_tag)"
        endnew

        component_create_argument_impl (method, my.meta)

        new code
            . = "
            .(c_class_assert_macros_ptr) (impl);
            .(c_class_assert_macros_ptr) (impl->info);

            return impl->info->impl_tag;
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add function that proxy 'cleanup' action to the implementation object.
# ---------------------------------------------------------------------------
function _L24_add_method_cleanup (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new method to my.destination
        . = "$(my.names.method_cleanup:Neat) implementation object and it's dependencies."

        .name = my.names.method_cleanup

        component_create_argument_impl (method, my.meta)

        new code
            . = "\
            .(c_class_assert_macros_ptr) (impl);
            .(c_class_assert_macros_ptr) (impl->info);
            .(c_class_assert_macros_ptr) (impl->info->self_cleanup_cb);

            impl->info->self_cleanup_cb (impl);
            "
        endnew
    endnew

endfunction

# ---------------------------------------------------------------------------
#   Add function that proxy 'delete' action to the implementation object.
# ---------------------------------------------------------------------------
function _L24_add_method_delete (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new method to my.destination
        . = "
        $(my.names.method_delete:Neat) implementation object and it's dependencies.
        "

        .name = my.names.method_delete

        component_create_argument_impl (method, my.meta)

        new code
            . = "\
            if (.(_argument_impl)) {
                .(c_class_assert_macros_ptr) (.(_argument_impl)->info);
                .(c_class_assert_macros_ptr) (.(_argument_impl)->info->self_delete_cb);
                .(_argument_impl)->info->self_delete_cb (.(_argument_impl));
            }
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add function that proxy 'destroy' action to the implementation object.
# ---------------------------------------------------------------------------
function _L24_add_method_destroy (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    new method to my.destination
        . = "
        $(my.names.method_destroy:Neat) implementation object and it's dependencies.
        "

        .name = my.names.method_destroy

        component_create_argument_impl_ref (method, my.meta)

        new code
            . = "\
            .(c_class_assert_macros_ptr) (.(_argument_impl));

            \.(c_class_impl_struct_impl)* impl = *.(_argument_impl);
            *impl_ref = NULL;

            .(c_class_impl_method_delete) (impl);
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add function that 'copy' implementation object by increasing ref counter.
# ---------------------------------------------------------------------------
function _L24_add_method_shallow_copy (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.method_shallow_copy
        .is_const = "0"

        . = "
        Copy implementation object by increasing reference counter.
        "

        component_create_argument_impl (method, my.meta)
        component_create_return_impl (method, my.meta)

        new code
            my.counter = ".(_argument_impl)->$(my.names.c_property_ref_counter:)"

            . = "\
            .(c_class_assert_macros_ptr) (.(_argument_impl));

            #if defined(.(c_class_atomic_macros_compare_exchange_weak))
            //  CAS loop
            size_t old_counter;
            size_t new_counter;
            do {
                old_counter = $(my.counter:);
                new_counter = old_counter + 1;
            } while (!.(c_class_atomic_macros_compare_exchange_weak)(&$(my.counter:), &old_counter, new_counter));
            #else
            ++$(my.counter:);
            #endif

            return .(_argument_impl);
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add function that 'copy' implementation object by increasing ref counter
#   with const semantic.
# ---------------------------------------------------------------------------
function _L24_add_method_shallow_copy_const (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new method to my.destination
        .name = my.names.method_shallow_copy_const
        .is_const = "1"

        . = "
        Copy implementation object by increasing reference counter.
        Reference counter is internally synchronized, so constness is presumed.
        "

        component_create_argument_impl (method, my.meta)
        component_create_return_impl (method, my.meta)

        new code
            . = "\
                return .(c_class_impl_method_shallow_copy)((.(c_class_impl_struct_impl) *).(_argument_impl));
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create module with functionality common for all 'implementation' objects.
# ---------------------------------------------------------------------------
function c_module_impl_create (meta, destination)
    check_arguments (my, "meta, destination", my)

    my.names = meta_names (my.meta)

    echo_trace ("Create module: $(my.names.module_impl)", my)

    new module to my.destination
        . = "\
        This module contains common functionality for all 'implementation' object.
        It is also enumerate all available implementations within crypto libary.
        "
        .name = my.names.module_impl
        .of_class = my.names.class_impl

        new require
            .module = my.names.module_library
        endnew

        new require
            .module = my.names.module_api
        endnew

        new require
            .module = my.names.module_api_private
            .scope = "private"
        endnew

        new require
            .module = my.names.module_impl_private
            .scope = "private"
        endnew

        new require
            .module = my.names.module_assert
            .scope = "private"
        endnew

        new require
            .module = my.names.module_atomic
            .scope = "private"
        endnew

        _L24_add_type_self (my.meta, module)
        _L24_add_enum_tag (my.meta, module)
        _L24_add_method_get_api (my.meta, module)
        _L24_add_method_get_tag (my.meta, module)
        _L24_add_method_cleanup (my.meta, module)
        _L24_add_method_delete (my.meta, module)
        _L24_add_method_destroy (my.meta, module)
        _L24_add_method_shallow_copy (my.meta, module)
        _L24_add_method_shallow_copy_const (my.meta, module)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return enumeration type for implementations within given source.
# ---------------------------------------------------------------------------
function c_module_impl_find_enum_tag (source, meta)
    check_arguments (my, "source, meta", my)

    my.names = meta_names (my.meta)

    my.module = my.source->module (name = my.names.module_impl) ?
    if ! defined (my.module)
        echo_fatal ("Module '$(my.names.module_impl:)' \
                is not found within given source.", my)
    endif

    my.enum = my.module->enum (name = my.names.enum_tag) ?
    if ! defined (my.enum)
        echo_fatal ("Enum '$(my.names.enum_tag:)' \
                is not found within module '$(my.names.module_impl:)'.", my)
    endif

    return my.enum
endfunction

.endtemplate
