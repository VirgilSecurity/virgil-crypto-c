.template 0
#   Copyright (C) 2015-2021 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   This module contains functions processing component 'implementation'.
#   Private function prefix is: P14.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"
gsl from "interface.gsl"
gsl from "component.gsl"
gsl from "c_component.gsl"

# ---------------------------------------------------------------------------
#   Check that all interfaces are implemented explicitly.
# ---------------------------------------------------------------------------
function implementation_check_interface_hierarchy (interface, implementation, source)
    check_arguments (my, "interface, implementation, source", my)

    my.interface_definition = interface_find (my.interface.name, my.source)

    for my.interface_definition.inherit
        if count (my.implementation.interface, name = inherit.interface) = 0
            echo_fatal ("Implementation of the '$(inherit.interface:)' interface \
                    required by interface '$(my.interface.name)' \
                    within <$(name (my.implementation)) name=\"$(my.implementation.name)\"/>")
        endif

        my.inherited_interface = interface_find (inherit.interface, my.source)
        implementation_check_interface_hierarchy (my.inherited_interface, my.implementation, my.source)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Copy interface methods to the implemented interface.
# ---------------------------------------------------------------------------
function implementation_copy_interface_methods (interface, implementation, source)
    check_arguments (my, "interface, implementation, source", my)

    my.interface_definition = interface_find (my.interface.name, my.source)

    for my.interface_definition.method
        my.copied_method = item_copy_to (method, my.interface)
        my.copied_method.implementation = my.implementation.name
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Resolve attribute: implementation.context
# ---------------------------------------------------------------------------
function implementation_resolve_attr_context (implementation)
    check_argument (my, "implementation", my)

    if count (my.implementation.context)
        my.implementation.context ?= "default"
        return
    endif

    for my.implementation.interface
        for interface.method where ! method.is_static
            my.implementation.context ?= "default"
            return
        endfor
    endfor

    for my.implementation.method where ! method.is_static
        my.implementation.context ?= "default"
        return
    endfor

    my.implementation.context ?= "none"
endfunction

# ---------------------------------------------------------------------------
#   Resolve attribute: implementation.lifecycle
# ---------------------------------------------------------------------------
function implementation_resolve_attr_lifecycle (implementation)
    check_argument (my, "implementation", my)

    my.implementation.lifecycle ?= my.implementation.context ? "none"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: context.require.
# ---------------------------------------------------------------------------
function implementation_resolve_context_require (require, parent)
    check_arguments (my, "require, parent", my)

    my.require.scope ?= "public"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: context.property.
# ---------------------------------------------------------------------------
function implementation_resolve_context_porperty (property, parent)
    check_arguments (my, "property, parent", my)

    my.property.access ?= "readwrite"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.context.
# ---------------------------------------------------------------------------
function implementation_resolve_context (context, parent)
    check_arguments (my, "context, parent", my)

    for my.context.require
        implementation_resolve_context_require (require, my.context)
    endfor

    for my.context.property
        implementation_resolve_context_porperty (property, my.context)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.interface.constant.
# ---------------------------------------------------------------------------
function implementation_resolve_interface_constant (constant_definition, constant_declaration, parent)
    check_arguments (my, "constant_definition, constant_declaration, parent", my)

    component_require_attr_name (my.constant_definition)
    component_require_attr_value (my.constant_definition)

    my.constant_definition. ?= my.constant_declaration. ?
    my.constant_definition.type = my.constant_declaration.type
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.interface.
# ---------------------------------------------------------------------------
function implementation_resolve_interface (interface, parent, source)
    check_arguments (my, "interface, parent, source", my)

    component_require_attr_name (my.interface, my)

    my.interface_declaration = interface_find (my.interface.name, my.source)

    for my.interface.constant as constant_definition
        my.constant_declaration = my.interface_declaration->constant (name = constant_definition.name)
        implementation_resolve_interface_constant (constant_definition, my.constant_declaration, my.interface)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Resolve attribute: implementation.dependency.type.
# ---------------------------------------------------------------------------
function implementation_resolve_attr_dependency_type (require, parent)
    check_arguments (my, "require", my)

    my.require.type ?= "api"

    my.valid_types = "api, impl"

    if ! string_in (my.require.type, my.valid_types)
        my.require_dump = "<$(name (my.require)) name=\"$(my.require.name:)\" type=\"$(my.require.type)\")"

        echo_fatal ("Invalid attribute dependency.type '$(my.require_dump:)'. Expected {$(my.valid_types)}", my)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.macros.
# ---------------------------------------------------------------------------
function implementation_resolve_macros (macros, parent)
    check_arguments (my, "macros, parent", my)

    my.macros.definition ?= "private"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.macros.
# ---------------------------------------------------------------------------
function implementation_resolve_macroses (macroses, parent)
    check_arguments (my, "macroses, parent", my)

    my.macroses.definition ?= "private"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.constant.
# ---------------------------------------------------------------------------
function implementation_resolve_constant (constant, parent)
    check_arguments (my, "constant, parent", my)

    my.constant.definition ?= "private"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.enum.
# ---------------------------------------------------------------------------
function implementation_resolve_enum (enum, parent)
    check_arguments (my, "enum, parent", my)

    my.enum.declaration ?= "private"
    my.enum.definition ?= "private"
endfunction


# ---------------------------------------------------------------------------
#   Resolve model: implementation.method.
# ---------------------------------------------------------------------------
function implementation_resolve_method (method, impl)
    check_arguments (my, "method, impl", my)

    my.method.declaration ?= "private"
    my.method.definition ?= "private"
    my.method.visibility ?= my.method.declaration

    for my.method.argument where string_equal (0.class ?, "self")
        .name ?= "ctx"
        .access ?= "readwrite"
        .class = my.impl.name
    endfor

    for my.method.argument
        for argument.length where defined(length.class)
            if length.class = "self"
                length.class = my.impl.name
            endif
        endfor
    endfor

    for my.method.return where string_equal (0.class ?, "self")
        .access ?= "disown"
        .class = my.impl.name
    endfor

    component_resolve_method (my.method, my.impl)
endfunction

# ---------------------------------------------------------------------------
#   Resolve entity: constructor.
# ---------------------------------------------------------------------------
function implementation_resolve_constructor (constructor, impl)
    check_arguments (my, "constructor, impl", my)

    my.constructor.is_static = "1"
    my.constructor.declaration ?= "public"
    implementation_resolve_method (my.constructor, my.impl)
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.require.
# ---------------------------------------------------------------------------
function implementation_resolve_require (require, parent)
    check_arguments (my, "require, parent", my)

    my.require.scope ?= "private"
endfunction

# ---------------------------------------------------------------------------
#   Resolve model: implementation.
# ---------------------------------------------------------------------------
function implementation_resolve (implementation, parent, project)
    check_arguments (my, "implementation, parent, project", my)

    echo_trace ("Resolving implementation: $(my.implementation.name:)", my)

    component_require_attr_name (my.implementation, my)

    my.implementation.scope ?= "public"
    my.implementation.visibility ?= "public"
    my.implementation.c_prefix ?= my.project.prefix
    my.implementation.uid = make_id ("implelemntation", my.implementation.name)
    my.implementation.is_default = "1"

    for my.implementation.c_include
        implementation_resolve_c_include (c_include, my.implementation)
    endfor

    for my.implementation.interface as implemented_interface
        implementation_check_interface_hierarchy (implemented_interface, my.implementation, my.parent)
        implementation_resolve_interface (implemented_interface, my.implementation, my.parent)
        implementation_copy_interface_methods (implemented_interface, my.implementation, my.parent)
    else
        echo_fatal ("Implementation '$(my.implementation.name)' does not implement any interface.", my)
    endfor

    implementation_resolve_attr_context (my.implementation)
    implementation_resolve_attr_lifecycle (my.implementation)

    for my.implementation.context
        implementation_resolve_context (context, my.implementation)
    endfor

    for my.implementation.property
        implementation_resolve_context_porperty (property, my.implementation)
    endfor

    for my.implementation.dependency
        component_resolve_dependency (dependency, my.implementation)
    endfor

    for my.implementation.constant
        implementation_resolve_constant (constant, my.implementation)
    endfor

    for my.implementation.macros
        implementation_resolve_macros (macros, my.implementation)
    endfor

    for my.implementation.macroses
        implementation_resolve_macroses (macroses, my.implementation)
    endfor

    for my.implementation.enum
        implementation_resolve_enum (enum, my.implementation)
    endfor

    for my.implementation.constructor
        implementation_resolve_constructor (constructor, my.implementation)
    endfor

    for my.implementation.method
        implementation_resolve_method (method, my.implementation)
    endfor

    for my.implementation.require
        implementation_resolve_require (require, my.implementation)
    endfor

    foreach_component_resolve (my.implementation)
endfunction

# ---------------------------------------------------------------------------
#   Traverse implementations within source and perform complete resolution.
# ---------------------------------------------------------------------------
function foreach_implementation_resolve (source, project)
    check_arguments (my, "source, project", my)

    for my.source.implementation
        implementation_resolve (implementation, my.source, my.project)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create 'meta entity' for each implementation within source.
# ---------------------------------------------------------------------------
function foreach_implementation_update_meta (source, meta)
    check_arguments (my, "source, meta", my)

    for my.source.implementation
        meta_add_implementation (my.meta, implementation)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Create 'feature' for given 'implementation'.
# ---------------------------------------------------------------------------
function implementation_create_feature (impl, project, destination)
    check_arguments (my, "impl, project, destination", my)

    my.impl_feature = my.impl->feature(feature.name = my.impl.name) ?
    if !defined(my.impl_feature)
        new feature to my.destination
            .name = my.impl.name
            my.impl_feature = feature
        endnew
    else
        my.impl_feature = item_copy_to(my.impl_feature, my.destination)
    endif
    my.impl_feature. ?= "Enable class '$(my.impl.name)'."
    my.impl_feature.project = my.project.name

    for my.impl.require where defined (0.feature)
        copy require to my.impl_feature
    endfor

    for my.impl.require where has_one_of_attribute (require, "class, interface, impl")
        new require to my.impl_feature
            .feature = -1.class ? -1.interface ? -1.impl
            .scope = -1.scope ?
            .project = -1.project ?
            .is_optional = -1.is_optional ?
        endnew
    endfor
endfunction

# ---------------------------------------------------------------------------
#   For each 'implementation' within 'source' create 'feature'.
# ---------------------------------------------------------------------------
function foreach_implementation_create_feature (source, project, destination)
    check_arguments (my, "source, project, destination", my)

    for my.source.implementation
        implementation_create_feature (implementation, my.project, my.destination)
    endfor
endfunction

.endtemplate
