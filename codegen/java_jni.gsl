.template 0
#   Copyright (C) 2015-2020 Virgil Security Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for Java wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"

# ---------------------------------------------------------------------------
#   Create entity <java_method/> of from the class entity <method/>.
# ---------------------------------------------------------------------------
function java_create_class_jni_default_constructor (java_class, class, java_project, meta)
    check_arguments (my, "java_class, class, java_project, meta", my)

    echo_debug ("Create JNI constructor '$(my.java_class.name:)'", my)

    # Obtain JNI class
    my.jni_context_class_name = java_derive_jni_context_class_name(my.java_project)
    my.jni_module = my.java_project->java_module(java_module.name = my.jni_context_class_name)?
    my.jni_context_class = my.jni_module->java_class

    # Build Java method
    my.jni_method_name = "$(my.class.name:Camel)_new"

    # Create method if it doesn't exist
    if ! defined (my.jni_context_class->java_method(java_method.name = my.jni_method_name)?)

        # Create declaration
        new java_method to my.jni_context_class
            #TODO insert description
            . = ""
            .name = my.jni_method_name
            .visibility = "public"
            .native = "1"

            new java_return to java_method
                .type = java_derive_class_context_type (my.class)
            endnew

            return java_method
        endnew

    endif

endfunction

function java_create_jni_class_constructor (class, constructor, java_project, meta)
    check_arguments (my, "class, constructor, java_project, meta", my)

    echo_debug ("Create JNI constructor for '$(my.class.name:)'", my)

    # Obtain JNI class
    my.jni_context_class_name = java_derive_jni_context_class_name(my.java_project)
    my.jni_module = my.java_project->java_module(java_module.name = my.jni_context_class_name)?
    my.jni_context_class = my.jni_module->java_class

    # Build Java method
    my.jni_method_name = "$(my.class.name:Camel)_new"

    # Create method if it doesn't exist
    #if ! defined (my.jni_context_class->java_method(java_method.name = my.jni_method_name)?)

        # Create declaration
        new java_method to my.jni_context_class
            #TODO insert description
            . = ""
            .name = my.jni_method_name
            .visibility = "public"
            .native = "1"

            for my.constructor.argument
                java_create_argument (argument, java_method, my.java_project, my.meta)
            endfor

            new java_return to java_method
                .type = java_derive_class_context_type (my.class)
            endnew

            return java_method
        endnew

    #endif
endfunction

function java_create_jni_class_close (class, java_project, meta)
    check_arguments (my, "class, java_project, meta", my)

    echo_debug ("Create JNI method 'close' for class '$(my.class.name:Camel)'", my)

    # Obtain JNI class
    my.jni_context_class_name = java_derive_jni_context_class_name(my.java_project)
    my.jni_module = my.java_project->java_module(java_module.name = my.jni_context_class_name)?
    my.jni_context_class = my.jni_module->java_class

    # Build Java method
    my.jni_method_name = "$(my.class.name:Camel)_close"

    # Create method if it doesn't exist
    if ! defined (my.jni_context_class->java_method(java_method.name = my.jni_method_name)?)

        # Create declaration
        new java_method to my.jni_context_class
            #TODO insert description
            . = ""
            .name = my.jni_method_name
            .visibility = "public"
            .native = "1"

            java_create_jni_context_argument (java_method, my.java_project, my.meta)

            return java_method
        endnew

    endif
endfunction

# ---------------------------------------------------------------------------
#   Create Java method that makes proxy to retrieve constant.
# ---------------------------------------------------------------------------
function java_create_jni_proxy_method_from_constant (constant, interface, destination, java_project, meta)
    check_arguments (my, "constant, destination, java_project, meta", my)

    echo_debug ("Create JNI method for interface '$(my.interface.name:Pascal)' constant '$(my.constant.name:Pascal)", my)

    # Obtain JNI class
    my.jni_context_class_name = java_derive_jni_context_class_name(my.java_project)
    my.jni_module = my.java_project->java_module(java_module.name = my.jni_context_class_name)?
    my.jni_context_class = my.jni_module->java_class

    # Build Java method
    my.getter_name = java_derive_getter_name_by_constant (my.constant, my.java_project)
    my.jni_method_name = "$(my.interface.name:Camel)_$(my.getter_name:)"

    # Create method if it doesn't exist
    if ! defined (my.jni_context_class->java_method(java_method.name = my.jni_method_name)?)

        # Create declaration
        new java_method to my.jni_context_class
            #TODO insert description
            . = ""
            .name = my.jni_method_name
            .visibility = "public"
            .native = "1"

            new java_return to java_method
                .type = java_derive_constant_type (my.constant, my.java_project)
                .access = "readonly"
                .is_enum = "0"
                .is_reference = "0"
            endnew

            java_create_jni_context_argument (java_method, my.java_project, my.meta)
        endnew

    endif
endfunction

# ---------------------------------------------------------------------------
#   Create entity <java_method/> of from the class entity <method/>.
# ---------------------------------------------------------------------------
function java_create_jni_class_method (interface, method, java_method, class, java_project, meta)
    check_arguments (my, "interface, java_method, class, java_project, meta", my)

    echo_debug ("Create JNI method '$(my.java_method.name:)' for interface '$(my.interface.name:Camel)'", my)

    # Obtain JNI class
    my.jni_context_class_name = java_derive_jni_context_class_name(my.java_project)
    my.jni_module = my.java_project->java_module(java_module.name = my.jni_context_class_name)?
    my.jni_context_class = my.jni_module->java_class

    # Build Java method
    my.jni_method_name = "$(my.interface.name:Camel)_$(my.java_method.name:)"

    # Create method if it doesn't exist
    if ! defined (my.jni_context_class->java_method(java_method.name = my.jni_method_name)?)

        # Create declaration
        new java_method to my.jni_context_class
            #TODO insert description
            . = my.java_method. ? ""
            .throws = my.java_method.throws ?
            .name = my.jni_method_name
            .visibility = "public"
            .native = "1"

            if (! string_in (my.class.context, "none")) & is_false (my.method.is_static)
                java_create_jni_context_argument (java_method, my.java_project, my.meta)
            endif

            for my.java_method.java_argument
                copy java_argument to java_method
            endfor

            if defined(my.java_method->java_return)
                echo_debug ("$(my.interface.name:Camel)_$(my.java_method.name:) has return argument", my)
                copy my.java_method->java_return to java_method
            else
                echo_debug ("$(my.interface.name:Camel)_$(my.java_method.name:) has return argument", my)
            endif

            return java_method
        endnew

    endif

endfunction

# ---------------------------------------------------------------------------
#   Add JNI <java_method/> with setter only that proxy dependency to the
#   C context.
# ---------------------------------------------------------------------------
function java_create_jni_method_from_dependency (dependency, impl, destination, java_project, meta)
    check_arguments (my, "dependency, impl, destination, java_project, meta", my)

    # Obtain JNI class
    my.jni_context_class_name = java_derive_jni_context_class_name(my.java_project)
    my.jni_module = my.java_project->java_module(java_module.name = my.jni_context_class_name)?
    my.jni_context_class = my.jni_module->java_class

    # Build Java method

    my.jni_method_name = "$(my.impl.name:Camel)_$(java_derive_method_name_str (cat ("set", my.dependency.name)))"

    new java_method to my.jni_context_class
        . = java_format_description (my.dependency) ?
        .name = my.jni_method_name
        .visibility = "public"
        .native = "1"

        if is_true (my.dependency.has_observers)
            .throws = java_derive_default_exception_name (my.java_project)
        endif

        my.arg_name = java_derive_argument_name (my.dependency)

        java_create_jni_context_argument (java_method, my.java_project, my.meta)

        new java_argument to java_method
            .name = my.arg_name
            .type = java_derive_dependency_type (my.dependency)
        endnew
    endnew

endfunction

.endtemplate
