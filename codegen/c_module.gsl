.template 0
#   Copyright (C) 2015-2021 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create language "C" specific 'c_module' components from the generic
#   'component' components.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "c_component.gsl"
gsl from "c_formatter.gsl"


# ---------------------------------------------------------------------------
#   Add 'c_license' to destination.
# ---------------------------------------------------------------------------
function c_module_add_license (project, destination)
    check_arguments (my, "project, destination", my)

    new c_license to my.destination
        . = c_format_comment (my.project->license.)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add 'c_caution' to destination.
# ---------------------------------------------------------------------------
function c_module_add_caution (module, destination)
    check_arguments (my, "module, destination", my)

    new c_caution to my.destination
        . = c_format_comment ("\
            This file is partially generated.
            Generated blocks are enclosed between tags [@<tag>, @end].
            User's code can be added between tags [@end, @<tag>].
        ")
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add 'c_include' to destination.
# ---------------------------------------------------------------------------
function c_module_add_includes (module, destination)
    check_arguments (my, "module, destination", my)

    for my.module.require
        c_component_create_include (require, my.destination)
    endfor

    for my.module.c_include as source
        my.c_include = item_copy_to (source, my.destination)
        c_component_resolve_include (my.c_include)
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Return true if source file for given module must be generated.
# ---------------------------------------------------------------------------
function c_module_need_source (c_module)
    check_arguments (my, "c_module", my)

    if is_true (my.c_module.is_header_only)
        return "0"
    endif

    if count (my.c_module.c_enum)
        return "1"
    endif

    if count (my.c_module.c_struct)
        return "1"
    endif

    if count (my.c_module.c_method)
        return "1"
    endif

    if count (my.c_module.c_constant)
        return "1"
    endif

    if count (my.c_module.c_alias)
        return "1"
    endif

    if count (my.c_module.c_variable)
        return "1"
    endif

    if count (my.c_module.c_callback)
        return "1"
    endif

    return "0"
endfunction


# ---------------------------------------------------------------------------
#   For each 'module' component create 'c_module'.
# ---------------------------------------------------------------------------
function c_module_create (source, destination, project)
    check_arguments (my, "source, destination, project", my)

    for my.source.module
        component_require_attr_name (module, my)
        component_require_attr_of_class (module, my)

        echo_trace ("Creating <c_module/> from \
                <$(name (module)) name = \"$(module.name:)\"/>", my)

        new c_module to my.destination
            . = c_format_comment (module.) ?
            .lang = "C"
            .id = module.name
            .name = c_format_name (module.c_prefix, module.name)
            .class = c_format_name (module.class)
            .scope = module.scope
            .has_cmakedefine = module.has_cmakedefine
            .is_header_only = module.is_header_only ?

            c_component_map_attr_uid (c_module, module)
            c_component_map_attr_feature (c_module, module)

            if c_module.scope = "public"
                my.resolved_header_path = my.project.inc_path
            elsif c_module.scope = "private"
                my.resolved_header_path = my.project.inc_private_path
            else
                my.resolved_header_path = my.project.src_path
            endif

            my.configuration_suffix = c_module.has_cmakedefine ?? ".in" ? ""

            .c_include_file = 0.name + ".h"
            .c_source_file = 0.name + ".c"
            .header_file = cat_path (my.resolved_header_path, 0.c_include_file + my.configuration_suffix)
            .source_file = cat_path (my.project.src_path, 0.c_source_file)
            .once_guard = c_format_name (0.c_include_file, "included")

            new c_include
                .file = .c_include_file
                .is_system = "0"
                .scope = "private"
            endnew

            c_module_add_license (my.project, c_module)
            c_module_add_caution (module, c_module)
            c_module_add_includes (module, c_module)

            for module.c_alias
                copy c_alias to c_module
            endfor

            new c_enum to c_module
                .= c_format_description ("Public integral constants.")
                .declaration = "public"
                .definition = "public"

                for module.constant where definition = "public"
                    c_component_create_constant (constant, c_enum)
                else
                    delete c_enum
                endfor
            endnew

            new c_enum to c_module
                .= c_format_description ("Private integral constants.")
                .declaration = "private"
                .definition = "private"

                for module.constant where definition = "private"
                    c_component_create_constant (constant, c_enum)
                else
                    delete c_enum
                endfor
            endnew

            for module.cmake_include_file_check
                copy cmake_include_file_check to c_module
            endfor

            for module.macros
                c_component_create_macros (macros, c_module)
            endfor

            for module.code
                copy code to c_module as c_code
            endfor

            for module.macroses
                c_component_create_macroses (macroses, c_module)
            endfor

            for module.callback
                c_component_create_callback (callback, c_module)
            endfor

            for module.enum
                c_component_create_enum (enum, c_module)
            endfor

            for module.struct
                c_component_create_struct (struct, c_module)
            endfor

            for module.variable
                c_component_create_variable (variable, c_module)
            endfor

            for module.method
                c_component_create_method (method, c_module)
            endfor
        endnew
    else
        echo_warning ("Source does not contain any <module/> item", my)
    endfor
endfunction


# ---------------------------------------------------------------------------
#   Function that resolves undefined properties within 'c_module'.
# ---------------------------------------------------------------------------
function c_module_resolve (source)
    #   Components are created already resolved at this moment,
    #   but this can be changed in the future, so keep this function alive.
endfunction


# ---------------------------------------------------------------------------
#   Change scope of the include file if type appears in the header.
# ---------------------------------------------------------------------------
function _M20_c_include_resolve_scope (c_module, c_include, is_public_instance, require_definition)
    check_arguments (my, "c_module, c_include, is_public_instance", my)

    if my.is_public_instance & (my.c_include.scope = "private") & (my.c_include.file <> my.c_module.c_include_file) & \
             (! defined (my.require_definition) | my.require_definition = "public")
        my.c_include.scope = "public"
    endif
endfunction


# ---------------------------------------------------------------------------
#   Append or modify entity <c_include/> based on the given <header_info/>.
# ---------------------------------------------------------------------------
function c_module_add_in_project_include_from_header (c_module, header, is_public_instance, projects_api, require_definition)
    check_arguments (my, "c_module, header, is_public_instance, projects_api", my)

    my.c_include = my.c_module->c_include(file = my.header.file) ?

    if ! defined (my.c_include)
        new c_include to my.c_module
            .file = my.header.file
            .scope = "private"
            .is_system = "0"

            my.c_include = c_include
        endnew
    endif

    _M20_c_include_resolve_scope (my.c_module, my.c_include, my.is_public_instance, my.require_definition)
endfunction


# ---------------------------------------------------------------------------
#   Append or modify entity <c_include/> based on the given <header_info/>.
# ---------------------------------------------------------------------------
function c_module_add_system_include_from_header (c_module, header, is_public_instance, projects_api, require_definition)
    check_arguments (my, "c_module, header, is_public_instance, projects_api", my)

    if ! defined (my.header.system)
        return
    endif

    my.c_include = my.c_module->c_include(file = my.header.system) ?

    if ! defined (my.c_include)
        if defined (my.header.framework)
            my.condition_uid = make_id ("c global macros import project", my.header.project, "from framework")
            my.condition = "!$(projects_api_find_resolved_name (my.projects_api, my.condition_uid))"
        endif

        new c_include to my.c_module
            .file = my.header.system
            .scope = "private"
            .is_system = "1"
            .if = my.condition ?

            my.c_include = c_include
        endnew
    endif

    _M20_c_include_resolve_scope (my.c_module, my.c_include, my.is_public_instance, my.require_definition)
endfunction


# ---------------------------------------------------------------------------
#   Append or modify entity <c_include/> based on the given <header_info/>.
# ---------------------------------------------------------------------------
function c_module_add_framework_include_from_header (c_module, header, is_public_instance, projects_api, require_definition)
    check_arguments (my, "c_module, header, is_public_instance, projects_api", my)

    if ! defined (my.header.framework)
        return
    endif

    my.c_include = my.c_module->c_include(file = my.header.framework) ?

    if ! defined (my.c_include)
        my.condition_uid = make_id ("c global macros import project", my.header.project, "from framework")
        my.condition = projects_api_find_resolved_name (my.projects_api, my.condition_uid)

        new c_include to my.c_module
            .file = my.header.framework
            .scope = "private"
            .is_system = "1"
            .if = my.condition

            my.c_include = c_include
        endnew
    endif

    _M20_c_include_resolve_scope (my.c_module, my.c_include, my.is_public_instance, my.require_definition)
endfunction


# ---------------------------------------------------------------------------
#   Append or modify entity <c_include/> based on the given <header_info/>.
# ---------------------------------------------------------------------------
function c_module_add_include_from_declaration_header (c_module, header, is_public_instance, projects_api)
    check_arguments (my, "c_module, header, is_public_instance, projects_api", my)

    if my.header.is_external
        c_module_add_system_include_from_header (\
                my.c_module, my.header, my.is_public_instance, my.projects_api)

        c_module_add_framework_include_from_header (\
                my.c_module, my.header, my.is_public_instance, my.projects_api)

    else
        c_module_add_in_project_include_from_header (\
                my.c_module, my.header, my.is_public_instance, my.projects_api)
    endif
endfunction


# ---------------------------------------------------------------------------
#   Append or modify entity <c_include/> based on the given <header_info/>.
# ---------------------------------------------------------------------------
function c_module_add_include_from_definition_header (c_module, header, is_public_instance, projects_api, require_definition)
    check_arguments (my, "c_module, header, is_public_instance, projects_api", my)

    if ! defined (my.require_definition)
        return
    endif

    if my.header.is_external
        c_module_add_system_include_from_header (\
                my.c_module, my.header, my.is_public_instance, my.projects_api, my.require_definition)

        c_module_add_framework_include_from_header (\
                my.c_module, my.header, my.is_public_instance, my.projects_api, my.require_definition)

    else
        c_module_add_in_project_include_from_header (\
                my.c_module, my.header, my.is_public_instance, my.projects_api, my.require_definition)
    endif
endfunction


# ---------------------------------------------------------------------------
#   Add missed headers based on the used types.
# ---------------------------------------------------------------------------
function c_module_add_headers (c_module, projects_api)
    check_arguments (my, "c_module, projects_api", my)

    for my.c_module. as c_type where item_in(c_type, "c_struct, c_callback, c_method")
        for c_type. as c_instance where item_in(c_instance, "c_variable, c_argument, c_return, c_property")

            if item_in (c_type, "c_struct") & c_type.definition = "external"
                next
            endif

            my.is_public_instance = \
                    (item_in (c_type, "c_struct") & c_type.definition = "public") | \
                    (item_in (c_type, "c_callback, c_method") & c_type.declaration = "public")

            my.declaration_header = projects_api_find_declaration_header (my.projects_api, c_instance.type) ?
            my.definition_header = projects_api_find_definition_header (my.projects_api, c_instance.type) ?

            if defined (my.declaration_header)
                c_module_add_include_from_declaration_header (\
                        my.c_module, my.declaration_header, my.is_public_instance, my.projects_api)
            endif

            if defined (my.definition_header)
                c_module_add_include_from_definition_header (\
                        my.c_module, my.definition_header, my.is_public_instance, my.projects_api,\
                        c_instance.require_definition)
            endif
        endfor
    endfor
endfunction

.endtemplate
