.template 0
#   Copyright (C) 2015-2022 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Transform abstract 'enum' declaration to the C language components.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------


gsl from "common.gsl"
gsl from "component.gsl"


# ---------------------------------------------------------------------------
#   Create 'module' component with a given enum.
# ---------------------------------------------------------------------------
function c_module_enum_create_module (enum, destination, meta)
    check_arguments (my, "enum, destination, meta", my)

    new module to my.destination
        . = my.enum.?
        .name = my.enum.name
        .of_class ?= my.enum.name
        .c_prefix = my.enum.c_prefix
        .scope = my.enum.scope

        component_clean_copy (my.enum, module)
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Entrypoint.
# ---------------------------------------------------------------------------
function c_module_enum_create (source, destination, meta)
    check_arguments (my, "source, destination, meta", my)

    for my.source.enum
        meta_reset_active_entity (my.meta, enum.name)

        c_module_enum_create_module (enum, my.destination, my.meta)
    endfor
endfunction

.endtemplate
