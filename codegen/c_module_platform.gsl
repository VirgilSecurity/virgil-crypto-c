.template 0
#   Copyright (C) 2015-2020 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Create module with platform specific information.
#   Private function prefix is: C20.
# ---------------------------------------------------------------------------
#   This is a code generator helper built using the iMatix GSL code
#   generation language. See https://github.com/zeromq/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "component.gsl"
gsl from "meta.gsl"


function c_module_platform_create_cmake_include_file_check(file_name, module)
    check_arguments(my, "file_name, module", my)

    my.macros_name = make_id(cat("have", my.file_name))
    my.macros_ref = make_ref_c(cat("global macros", my.macros_name))

    new cmake_include_file_check to my.module
        .file = my.file_name
        .result_variable = my.macros_ref
    endnew

    new macroses to my.module
        new macros to macroses
            .name = my.macros_name
        endnew

        new code to macroses
            . = "
                #ifndef $(my.macros_ref)
                #cmakedefine01 $(my.macros_ref)
                #endif
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create module with functionality common for all 'implementation' objects.
# ---------------------------------------------------------------------------
function c_module_platform_create (project, destination, meta)
    check_arguments (my, "project, destination, meta", my)

    my.names = meta_names (my.meta)
    my.refs = meta_refs (my.meta)

    new module to my.destination
        . = "This file contains platform specific information that is known during compilation."
        .of_class = "global"
        .has_cmakedefine = "1"
        .name = my.names.module_platform

        c_module_platform_create_cmake_include_file_check("assert.h", module)
        c_module_platform_create_cmake_include_file_check("stdatomic.h", module)

        for my.project.cmake_compile_definition
            new macroses to module
                new macros to macroses
                    .name = cmake_compile_definition.name
                    .of_class = "global"
                endnew

                new code to macroses
                    my.macros_c_name = make_ref_c(make_id("global macros", cmake_compile_definition.name))
                    . = "
                        #ifndef $(my.macros_c_name:)
                        #cmakedefine01 $(my.macros_c_name:)
                        #endif
                    "
                endnew
            endnew
        endfor

        for my.project.feature
            new macroses to module
                new macros to macroses
                    .name = feature.name
                    .of_class = "global"
                endnew

                new code to macroses
                    my.macros_c_name = make_ref_c(make_id("global macros", feature.name))
                    . = "
                        #ifndef $(my.macros_c_name:)
                        #cmakedefine01 $(my.macros_c_name:)
                        #endif
                    "
                endnew
            endnew
        endfor

        for my.project.require where defined (require.project) & string_equal (require.feature, "library")
            new macroses to module
                . = "Defines namespace include prefix for project '$(require.project:)'."

                my.name = cat ("import project", require.project, "from framework")

                new macros to macroses
                    .name = my.name
                endnew

                new code to macroses
                    . = "\
                        #if !defined(.(c_global_macros_internal_build))
                        #cmakedefine01 .(c_global_macros_$(make_id (my.name)))
                        #else
                        #define .(c_global_macros_$(make_id (my.name))) 0
                        #endif
                    "
                endnew
            endnew
        endfor
    endnew
endfunction

.endtemplate
