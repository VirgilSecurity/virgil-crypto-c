#   Copyright (C) 2015-2021 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.

cmake_minimum_required(VERSION 3.12.0 FATAL_ERROR)

project(falcon VERSION 2019.09.18 LANGUAGES C)

# ---------------------------------------------------------------------------
#   Helpers
# ---------------------------------------------------------------------------
include(GNUInstallDirs)

# ---------------------------------------------------------------------------
#   Options
# ---------------------------------------------------------------------------
option(ENABLE_TESTING "On/Off tests." ON)
option(BUILD_SPEEDTEST "On/Off build of the speed program." OFF)

# ---------------------------------------------------------------------------
#   Build library
# ---------------------------------------------------------------------------
add_library(falcon)
target_sources(falcon
    PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}/codec.c
        ${CMAKE_CURRENT_LIST_DIR}/common.c
        ${CMAKE_CURRENT_LIST_DIR}/falcon.c
        ${CMAKE_CURRENT_LIST_DIR}/fft.c
        ${CMAKE_CURRENT_LIST_DIR}/fpr.c
        ${CMAKE_CURRENT_LIST_DIR}/keygen.c
        ${CMAKE_CURRENT_LIST_DIR}/shake.c
        ${CMAKE_CURRENT_LIST_DIR}/sign.c
        ${CMAKE_CURRENT_LIST_DIR}/vrfy.c
        ${CMAKE_CURRENT_LIST_DIR}/rng.c
    )

target_include_directories(falcon
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/falcon>
    )

#
# Define specific compilation and linkage flags.
#
target_compile_features(falcon PUBLIC c_std_99)

#
# Pedantic mode
#
target_compile_options(falcon
        PRIVATE
            $<$<C_COMPILER_ID:GNU>:
                    -Werror -Wall -pedantic -Wextra -Wshadow -Wundef -fno-strict-aliasing>

            $<$<OR:$<C_COMPILER_ID:Clang>,$<C_COMPILER_ID:AppleClang>>:
                    -Werror -Wall -pedantic -Wassign-enum -Wextra -Wshadow -Wundef>
        )

# ---------------------------------------------------------------------------
#   Build executables
# ---------------------------------------------------------------------------
if(BUILD_SPEEDTEST)
    add_executable(speed ${CMAKE_CURRENT_LIST_DIR}/speed.c)
    target_link_libraries(speed falcon)
endif()

if(ENABLE_TESTING)
    add_executable(test_falcon ${CMAKE_CURRENT_LIST_DIR}/test_falcon.c)
    target_link_libraries(test_falcon falcon)
endif()


# ---------------------------------------------------------------------------
#   Install library
# ---------------------------------------------------------------------------
include (CMakePackageConfigHelpers)

#
# Install headers.
#
install(
        DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/"
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/falcon"
        FILES_MATCHING PATTERN "*.h"
        )

#
# Install libraries.
#
install(
        TARGETS falcon
        EXPORT falconTargets
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        FRAMEWORK DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
        )
