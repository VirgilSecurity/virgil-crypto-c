#   Copyright (C) 2015-2022 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.

cmake_minimum_required(VERSION 3.12 FATAL_ERROR)

project(round5 VERSION 0.0.2 LANGUAGES C)

# ---------------------------------------------------------------------------
#   Helpers.
# ---------------------------------------------------------------------------
include(GNUInstallDirs)

# ---------------------------------------------------------------------------
#   Global build options.
# ---------------------------------------------------------------------------
option(BUILD_SHARED_LIBS "On/Off build shared libraries." OFF)

# ---------------------------------------------------------------------------
#   Algorithm detection based on the options.
# ---------------------------------------------------------------------------
#
#   Description from: https://github.com/round5/code
#
#   Instead of specifying ALG, it is possible to select ALG_TYPE, NIST_LEVEL, CPA_CCA, and XEF.
#
#   For instance:
#       make ALG=ND NIST_LEVEL=1 CPA_CCA=CCA XEF=1
#
#   ALG_TYPE: Specifies the algorithm type
#             (ND means ring-based, N1 means non-ring based) implemented by the NIST api. The default is ND.
#
#   NIST_LEVEL: Specifies the NIST security level. It can be 1, 3, or 5. The default is 1.
#
#   CPA_CCA: Specifies the type of parameter set. It can be CPA or CCA.
#            The default is CPA and it is suitable for the IND-CPA secure Round5 KEM.
#            The CCA parameter sets are required in the IND-CCA secure Round5 KEM and PKE.
#
#   XEF: When defined, specifies that the error correction variants of the parameter sets should be used
#        (e.g. R5ND_1CPA_5d will be used instead of R5ND_1CPA_0d).
set(ALG_TYPE "ND" CACHE STRING "Set algorithm type")
set_property(CACHE ALG_TYPE PROPERTY STRINGS ND T0 T1 T2)

set(NIST_LEVEL "1" CACHE STRING "NIST level")
set_property(CACHE NIST_LEVEL PROPERTY STRINGS 1 3 5)

set(CPA_CCA "CPA" CACHE STRING "CPA or CCA")
set_property(CACHE CPA_CCA PROPERTY STRINGS CPA CCA)

option(XEF "Use error correction variants of the parameter sets" ON)

# ---------------------------------------------------------------------------
#   Set algorithm by it's unique name.
# ---------------------------------------------------------------------------
if(XEF AND ALG_TYPE STREQUAL ND)
    set(ALG_DEFAULT "R5${ALG_TYPE}_${NIST_LEVEL}${CPA_CCA}_5d")
else()
    set(ALG_DEFAULT "R5${ALG_TYPE}_${NIST_LEVEL}${CPA_CCA}_0d")
endif()

set(ALG "${ALG_DEFAULT}" CACHE STRING "the algorithm implemented by the NIST api is specified")
set_property(CACHE ALG_TYPE PROPERTY STRINGS
        R5ND_1CPA_0d R5ND_3CPA_0d R5ND_5CPA_0d
        R5ND_1CCA_0d R5ND_3CCA_0d R5ND_5CCA_0d
        R5ND_1CPA_5d R5ND_3CPA_5d R5ND_5CPA_5d
        R5ND_1CCA_5d R5ND_3CCA_5d R5ND_5CCA_5d
        R5N1_1CPA_0d R5N1_3CPA_0d R5N1_5CPA_0d
        R5N1_1CCA_0d R5N1_3CCA_0d R5N1_5CCA_0d
        R5ND_0CPA_2iot
        R5ND_0CCA_4iot
        R5ND_1CPA_4longkey
        R5N1_3CCA_0smallCT
        )

# ---------------------------------------------------------------------------
#   Implementation specific options.
# ---------------------------------------------------------------------------
option(NIST_KAT_GENERATION "RNG depends on KAT-generation setting" OFF)
option(NO_OPENSSL_SHAKE "RNG depends on KAT-generation setting" OFF)
option(USE_AES_DRBG "Use AES in CTR mode instead of TupleHashXof in the generation of A" OFF)
option(USE_NIST_RNG "Use NIST RNG instead of platform dependent random" OFF)
option(CRYPTO_ENGINE_OPENSSL "Use missed crypto primitives from the OpenSSL library" ON)
option(CRYPTO_ENGINE_MBEDTLS "Use missed crypto primitives from the MbedTLS library" OFF)
option(BUILD_EXAMPLES "On/Off builds of example programs." OFF)
option(BUILD_SPEEDTEST "On/Off build of the speedtest program." OFF)


# ---------------------------------------------------------------------------
#   Check dependencies.
# ---------------------------------------------------------------------------
if(CRYPTO_ENGINE_MBEDTLS)
    #
    # mbedTLS
    #
    if(TARGET mbedcrypto AND NOT TARGET mbed::crypto)
        add_library(mbed::crypto ALIAS mbedcrypto)
    endif()

    if(NOT TARGET mbed::crypto AND MBEDTLS_INSTALL_LOCATION)
        #
        #   Import library as a target.
        #
        add_library(mbedcrypto STATIC IMPORTED GLOBAL)

        set_target_properties(mbedcrypto
                PROPERTIES
                IMPORTED_LOCATION
                    "${MBEDTLS_INSTALL_LOCATION}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}mbedcrypto${CMAKE_STATIC_LIBRARY_SUFFIX}"

                INTERFACE_INCLUDE_DIRECTORIES
                    "${MBEDTLS_INSTALL_LOCATION}/include"
                )

        #
        #   Alias library alias.
        #
        if(NOT TARGET mbed::crypto)
            add_library(mbed::crypto ALIAS mbedcrypto)
        endif()
    else()
        message(FATAL_ERROR
            "Required library 'mbedtls' is not found.\n"
            "Expected target 'mbedcrypto', or target 'mbed::crypto', or path MBEDTLS_INSTALL_LOCATION"
            )
    endif()
endif()

if(CRYPTO_ENGINE_OPENSSL)
    #
    # OpenSSL
    #
    if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        if(NOT ENV{OPENSSL_ROOT_DIR} AND EXISTS "/usr/local/opt/openssl@1.1")
            set(ENV{OPENSSL_ROOT_DIR} "/usr/local/opt/openssl@1.1")
        endif()
    endif()
    set(OPENSSL_USE_STATIC_LIBS NO)
    find_package(OpenSSL 1.1.1 COMPONENTS Crypto REQUIRED)
endif()

# ---------------------------------------------------------------------------
#   Implementations.
# ---------------------------------------------------------------------------
option(OPTIMIZED "Build optimized implementation" ON)
if(OPTIMIZED)
    add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/optimized")
endif()

# ---------------------------------------------------------------------------
#   Tests.
# ---------------------------------------------------------------------------
if(ENABLE_TESTING)
    add_subdirectory("${CMAKE_CURRENT_LIST_DIR}/tests")
endif()
