<?xml version="1.0"?>
<!--
    Copyright (C) 2015-2022 Virgil Security, Inc.

    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

        (1) Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        (2) Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in
        the documentation and/or other materials provided with the
        distribution.

        (3) Neither the name of the copyright holder nor the names of its
        contributors may be used to endorse or promote products derived from
        this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
-->


<entity name="lineage">
    Keep hierarchical information about parents.
    Lower component is a child relative to the upper component.

    <allow entity="ancestor" occurs="1+"/>
</entity>


<entity name="ancestor">
    Handles information about component ancestor.

    <attr name="id" required="1">
        Ancestor component name
    </attr>

    <attr name="name" required="1">
        Ancestor name
    </attr>
</entity>


<entity name="c_prefix" abstract="1">
    <attr name="c_prefix">
        Prefix that is used for C name resolution.
    </attr>
</entity>


<entity name="component" abstract="1">
    Groups common attributes for the component.

    <attr name="feature">
        In-project feature name that is implemented.
        This attribute is used for feature-based compilation.
    </attr>

    <inherit entity="uid"/>
    <inherit entity="of_class"/>
    <inherit entity="c_prefix"/>
</entity>

<entity name="scoped_component" abstract="1">
    Groups common attributes for a scoped component.
    Scoped component is a component that more precisely can specify
    the scope where it can be used.

    <attr name="scope" default="public">
        Defines component visibility for outside world.
        This attribute must be inherited from the 'component.scope'.
        This attribute can not has more relaxed value then the parent has.
        This attributed can be defined only within entities:
            - 'class'
            - 'implementation'.


        <restrict value="public">
            Component is visible for outside world.
        </restrict>

        <restrict value="private">
            Component is visible for outside world via private interface.
        </restrict>

        <restrict value="internal">
            Component is visible only within library.
        </restrict>

        <restrict value="hidden">
            Component is visible only within related source file.
            Not implemented yet!
        </restrict>
    </attr>

    <inherit entity="component"/>
</entity>


<entity name="instance" abstract="1">
    Defines attributes that related to the instance type.

    <attr name="type">
        Defines instance primitive type.

        <restrict value="nothing">
            The same as a C void type.
        </restrict>

        <restrict value="boolean">
            True / False type.
        </restrict>

        <restrict value="integer">
            Signed integral type.
        </restrict>

        <restrict value="unsigned">
            Unsigned integral type.
        </restrict>

        <restrict value="size">
            Unsigned integral type for size definition.
        </restrict>

        <restrict value="byte">
            Unsigned 8-bit integral type.
        </restrict>

        <restrict value="string">
            Shortcut for the char array.
        </restrict>

        <restrict value="char">
            Type for a character.
        </restrict>

        <restrict value="varargs">
            Type for variadic arguments.
        </restrict>
    </attr>

    <attr name="class">
        Defines instance class.

        Possible values are:
            * any    - Any class or type.
            * data   - Special class "data" that is used as an input byte array.
            * buffer - Special class "buffer" that is used as an output byte array.
            * impl   - Universal implementation class.
            * self   - Allowed within high-level entities, i.e. class, implementation, to refer the context type.

        If value differs from the listed above then next algorithm applied:
            1. If value in a format .(uid), then it treated as a reference to
               the in-project class and will be substituted during context
               resolution step.
            2. If attribute 'library' is defined, then it treated as third-party
               library class and will be used as-is.
            3. Any other value will be treated as cross-project class name and
               will be converted to the .(uid).
    </attr>

    <attr name="enum">
        Defines enumeration type.

        1. If value in a format .(uid), then it treated as a reference to
           the in-project enumeration and will be substituted during context
           resolution step.
        2. If attribute 'library' is defined, then it treated as third-party
           library class and will be used as-is.
        3. Any other value will be treated as cross-project class name and
           will be converted to the .(uid).
    </attr>

    <attr name="callback">
        Defines instance as a callback.

        1. If value in a format .(uid), then it treated as a reference to
           the in-project callback and will be substituted during context
           resolution step.
        2. If attribute 'library' is defined, then it treated as third-party
           library class and will be used as-is.
        3. Any other value will be treated as cross-project class name and
           will be converted to the .(uid).
    </attr>

    <attr name="interface">
        Defines instance as implementation of specific interface.
    </attr>

    <attr name="api">
        Defines instance as specific interface api.
    </attr>

    <attr name="impl">
        Defines instance as specific implementation.
    </attr>

    <attr name="size">
        Define size of the primitive type or enum in bytes.

        <restrict value="1">
            Size of the type is one byte.
        </restrict>

        <restrict value="2">
            Size of the type is two bytes.
        </restrict>

        <restrict value="4">
            Size of the type is three bytes.
        </restrict>

        <restrict value="8">
            Size of the type is four bytes.
        </restrict>
    </attr>

    <attr name="is_reference" required="1">
        Defines whether instance is a 'reference' instance.
        For 'type'     - default is '0'.
        For 'enum'     - default is '0'.
        For 'callback' - default is '0'.
        For 'class'    - default is '1'.

        <restrict value="0">
            Instance is not a reference.
        </restrict>

        <restrict value="1">
            Instance is a reference to the other instance.
        </restrict>
    </attr>

    <attr name="require_definition">
        Defines if instance requires type definition.

        <restrict value="public">
            Instance type definition is used within public scope.
        </restrict>

        <restrict value="private">
            Instance type definition is used within private scope.
        </restrict>
    </attr>

    <inherit entity="access"/>
    <inherit entity="landlord"/>

    <allow entity="string" occurs="0/1"/>
    <allow entity="array" occurs="0/1"/>
</entity>


<entity name="access">
    <attr name="access">
        Defines access rights to the instance and/or array of instances.

        <restrict value="readonly">
            Value of the given type is can be modified.
        </restrict>

        <restrict value="writeonly">
            Value of the given type will be modified.
        </restrict>

        <restrict value="readwrite">
            Value of the given type can be read and then modified.
        </restrict>

        <restrict value="disown">
            Ownership of the given class object is transferred.

            If object is passed via argument to method, then client can not
            use object after method return.

            If object is returned from method, then client is responsible for
            object destruction.

            Note, primitive type can not be disowned.
        </restrict>
    </attr>

    <attr name="ownership">

    </attr>
</entity>


<entity name="string">
    Defines restrictions to the special class 'string'.

    <attr name="length" default="null_terminated">
        Defines string length.

        <restrict value="null_terminated">
            String length is defined by distance from the first character
            up to the termination symbol (aka '\0').
        </restrict>

        <restrict value="given">
            String length is given from the client.
        </restrict>

       <restrict value="fixed">
            String length is known at compile time, so it can be substituted
            automatically.
        </restrict>

        <restrict value="derived">
            String length can be statically derived during string initialization.
        </restrict>
    </attr>

    <attr name="length_constant">
        For fixed size string it defines number of characters as integral constant.
    </attr>

    <inherit entity="access"/>
</entity>


<entity name="array">
    Turn parent instance to the array of instances.

    <attr name="length">
        Defines array length.

        <restrict value="null_terminated">
            Array length is defined by distance from the first element
            up to the empty element (aka NULL).
        </restrict>

        <restrict value="given">
            Array length is defined from the client.
        </restrict>

        <restrict value="known">
            Array length is defined from the client.
            Also client can obtained this value from a constant or a method.
        </restrict>

        <restrict value="fixed">
            Array length is known at compile time, so it can be substituted
            automatically.
        </restrict>

        <restrict value="derived">
            Array length can be statically derived during array initialization.
        </restrict>
    </attr>

    <attr name="length_constant">
        For fixed size array it defines number of elements as integral constant.
    </attr>

    <inherit entity="access"/>
</entity>


<entity name="require_scope" abstract="1">
    <attr name="scope" default="public">
        Defines scope for required component.

        <restrict value="public">
            Required component is visible for outside world.
        </restrict>

        <restrict value="private">
            Required component can be accessed within specific source file only.
        </restrict>

        <restrict value="context">
            Component is required by context, so it is visible if context is visible.
        </restrict>
    </attr>
</entity>


<entity name="require_base" abstract="1">
    Base attributes for require.

    <attr name="module">
        Required module name.
    </attr>

    <attr name="header">
        Required header file name.
    </attr>

    <attr name="feature">
        Required feature name.
    </attr>

    <attr name="interface">
        Required interface name.
    </attr>

    <attr name="class">
        Required class name.
    </attr>

    <attr name="impl">
        Required implementation name.
    </attr>

    <attr name="enum">
        Required implementation name.
    </attr>

    <inherit entity="landlord"/>
    <inherit entity="require_scope"/>
</entity>


<entity name="require">
    Defines dependency to: module, header, feature.

    <inherit entity="require_base"/>
    <allow entity="alternative"/>
</entity>


<entity name="alternative">
    Define alternative requirements that can be used, and in fact replace each other.

    <inherit entity="require_base"/>
</entity>


<entity name="constant">
    Defines integral constant.

    <attr name="name" required="1">
        Constant name.
    </attr>

    <attr name="value">
        Constant value.
        Optional for enumerated constant.
    </attr>

    <inherit entity="scoped_component"/>
    <inherit entity="definition"/>
</entity>


<entity name="variable">
    Defines global variable.

    <attr name="name" required="1">
        Object name.
    </attr>

    <inherit entity="scoped_component"/>
    <inherit entity="visibility"/>
    <inherit entity="declaration"/>
    <inherit entity="definition"/>
    <inherit entity="instance"/>

    <!-- Bracer initializer is used for multiple variable_value's -->
    <allow entity="value" occurs="1+" />
</entity>


<entity name="value">
    Initialization variable value.

    <attr name="value" required="1">
        Initialization value.
    </attr>

    <inherit entity="instance"/>

    <allow entity="cast" occurs="0/1"/>
</entity>


<entity name="cast">
    Cast parent instance type to the type defined in this entity.

    <inherit entity="instance"/>
</entity>


<entity name="enum">
    Defines enumeration type.

    <attr name="name">
        Object name.
    </attr>

    <inherit entity="scoped_component"/>
    <inherit entity="component"/>
    <inherit entity="visibility"/>
    <inherit entity="declaration"/>
    <inherit entity="definition"/>

    <allow entity="constant" occurs="0+"/>
</entity>


<entity name="struct">
    Defines struct type.

    <attr name="name" required="1">
        Structure name.
    </attr>

    <inherit entity="scoped_component"/>
    <inherit entity="visibility"/>
    <inherit entity="declaration"/>
    <inherit entity="definition"/>

    <allow entity="property"/>
</entity>


<entity name="property">
    Defines struct property.

    <attr name="name" required="1">
        Property name.
    </attr>

    <attr name="bits">
        Define number of bits occupied by the property with integral type.
    </attr>

    <inherit entity="instance"/>
    <inherit entity="uid"/>
</entity>


<entity name="method">
    Defines the method signature and optionally implementation.

    <attr name="name" required="1">
        Method name.
    </attr>

    <attr name="is_static" default="0">
        Defines that method is a class-level method.

        <restrict value="0">
            Method is a class-level method.
        </restrict>

        <restrict value="1">
            Method is an object-level method.
        </restrict>
    </attr>

    <attr name="nodiscard" default="0">
        Defines that method's return value should not be ignored.

        <restrict value="0">
            Returned value from the method CAN be ignored.
        </restrict>

        <restrict value="1">
            Returned value from the method CAN NOT be ignored.
        </restrict>
    </attr>

    <inherit entity="scoped_component"/>
    <inherit entity="visibility"/>
    <inherit entity="declaration"/>
    <inherit entity="definition"/>

    <allow entity="return" occurs="0/1"/>
    <allow entity="argument" occurs="0+"/>
    <allow entity="variable" occurs="0+"/>
    <allow entity="code" occurs="0/1"/>
</entity>


<entity name="callback">
    Defines the callback signature.

    <attr name="name" required="1">
        Method name.
    </attr>

    <inherit entity="scoped_component"/>
    <inherit entity="declaration"/>

    <allow entity="return" occurs="0/1"/>
    <allow entity="argument" occurs="0+"/>
</entity>


<entity name="argument">
    Defines argument as name, type, and usage information.

    <attr name="name" required="1">
        Argument name.
    </attr>

    <inherit entity="instance"/>
    <inherit entity="uid"/>
</entity>


<entity name="return">
    Defines return type.

    <inherit entity="instance"/>
</entity>


<entity name="macros">
    Defines the macros name and optionally implementation.

    <attr name="name" required="1">
        Macros name.
    </attr>

    <attr name="is_method" default="0">
        Defines whether macros if it can accept argument(s).

        <restrict value="0">
            Macros is a constant.
        </restrict>

        <restrict value="1">
            Macros is a method.
        </restrict>
    </attr>

    <inherit entity="definition"/>

    <allow entity="code" occurs="0/1"/>
</entity>


<entity name="macroses">
    Group a set of macroses with common implementation.

    <inherit entity="definition"/>

    <allow entity="macros" occurs="1+"/>
    <allow entity="code" occurs="1"/>
</entity>


<entity name="dependency">
    Defines dependency to interface or class.

    <attr name="name" required="1">
        Dependency name - used for properties and methods names.
    </attr>

    <attr name="interface">
        Defines name of the interface depends on.
        Dependency is taken as implementation object.
    </attr>

    <attr name="api">
        Defines name of the interface depends on.
        Dependency is taken as interface api object.
    </attr>

    <attr name="class">
        Defines name of the class depends on.
        Dependency is taken as class context object.
    </attr>

    <attr name="impl">
        Defines name of the implementation depends on.
        Dependency is taken as specific implementation object.
    </attr>

    <attr name="type_name">
        This is auto-resolve attribute!
        It is equal to the one of the attributes: {interface, api, class}.
    </attr>

    <attr name="has_observers" default="0">
        Allows to add observer methods for the dependency.

        <restrict value="0">
            Property is not observed.
        </restrict>

        <restrict value="1">
            Property is observed so methods "did_setup" and "did_release" must be generated.
        </restrict>
    </attr>

    <attr name="is_observers_return_status" default="0">
        Defines that observer can return error code.

        <restrict value="0">
            Observer methods CAN NOT return status code.
        </restrict>

        <restrict value="1">
            Observer methods CAN return status code.
        </restrict>
    </attr>

    <inherit entity="landlord"/>
</entity>

